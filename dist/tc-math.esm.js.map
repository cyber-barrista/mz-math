{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as vector from './vector';\nimport * as matrix from './matrix';\nimport * as format from './format';\nimport * as angle from './angle';\nimport * as random from './random';\nimport * as other from './other';\nimport * as convert from './convert';\nimport * as bezierCurve from './bezier-curve';\n\ndeclare global {\n    interface Window {\n        TCMath: {\n            v2: typeof vector.v2;\n            v3: typeof vector.v3;\n            vN: typeof vector.vN;\n            m2x2: typeof matrix.m2x2;\n            m3x3: typeof matrix.m3x3;\n            mNxM: typeof matrix.mNxM;\n            identity2: typeof matrix.identity2;\n            identity3: typeof matrix.identity3;\n            identityN: typeof matrix.identityN;\n\n            vEqual: typeof vector.vEqual;\n            mEqual: typeof matrix.mEqual;\n\n            vSum: typeof vector.vSum;\n            v2Sum: typeof vector.v2Sum;\n            v3Sum: typeof vector.v3Sum;\n\n            vSub: typeof vector.vSub;\n            v2Sub: typeof vector.v2Sub;\n            v3Sub: typeof vector.v3Sub;\n\n            vMulScalar: typeof vector.vMulScalar,\n            v2MulScalar: typeof vector.v2MulScalar;\n            v3MulScalar: typeof vector.v3MulScalar;\n\n            vLength: typeof vector.vLength;\n            v2Length: typeof vector.v2Length;\n            v3Length: typeof vector.v3Length;\n            v2SetLength: typeof vector.v2SetLength;\n\n            vNormalize: typeof vector.vNormalize,\n            v2Normalize: typeof vector.v2Normalize;\n            v3Normalize: typeof vector.v3Normalize;\n\n            vDotProduct: typeof vector.vDotProduct;\n            v2DotProduct: typeof vector.v2DotProduct;\n            v3DotProduct: typeof vector.v3DotProduct;\n            v3CrossProduct: typeof vector.v3CrossProduct;\n\n            mSum: typeof matrix.mSum;\n            m2Sum: typeof matrix.m2Sum;\n            m3Sum: typeof matrix.m3Sum;\n\n            mSub: typeof matrix.mSub;\n            m2Sub: typeof matrix.m2Sub;\n            m3Sub: typeof matrix.m3Sub;\n\n            mMulScalar: typeof matrix.mMulScalar;\n            m2MulScalar: typeof matrix.m2MulScalar;\n            m3MulScalar: typeof matrix.m3MulScalar;\n\n            mTranspose: typeof matrix.mTranspose;\n            m2Transpose: typeof matrix.m2Transpose;\n            m3Transpose: typeof matrix.m3Transpose;\n\n            mMul: typeof matrix.mMul;\n            mMulVector: typeof matrix.mMulVector;\n\n            mReset: typeof matrix.mReset;\n            m2Reset: typeof matrix.m2Reset;\n            m3Reset: typeof matrix.m3Reset;\n\n            m2Rotation: typeof matrix.m2Rotation;\n            v2Rotate: typeof matrix.v2Rotate;\n            m3RotationX: typeof matrix.m3RotationX;\n            v3RotateX: typeof matrix.v3RotateX;\n            m3RotationY: typeof matrix.m3RotationY;\n            v3RotateY: typeof matrix.v3RotateY;\n            m3RotationZ: typeof matrix.m3RotationZ;\n            v3RotateZ: typeof matrix.v3RotateZ;\n\n            m2Determinant: typeof matrix.m2Determinant;\n            m2Inverse: typeof matrix.m2Inverse;\n            m2Adjugate: typeof matrix.m2Adjugate;\n\n            m2Scale: typeof matrix.m2Scale;\n            v2Scale: typeof matrix.v2Scale;\n            m3Scale: typeof matrix.m3Scale;\n            v3Scale: typeof matrix.v3Scale;\n\n            getV2Angle: typeof angle.getV2Angle;\n            setV2Angle: typeof angle.setV2Angle;\n            radiansToDegrees: typeof angle.radiansToDegrees;\n            degreesToRadians: typeof angle.degreesToRadians;\n\n            setDecimalPlaces: typeof format.setDecimalPlaces;\n\n            getRandom: typeof random.getRandom;\n            getRandomInt: typeof random.getRandomInt;\n            getRandomBoolean: typeof random.getRandomBoolean;\n            getRandomItemFromArray: typeof random.getRandomItemFromArray;\n\n            mod: typeof other.mod;\n            convertRange: typeof other.convertRange;\n            doRangesOverlap: typeof other.doRangesOverlap;\n            isNumber: typeof other.isNumber;\n\n            stringToNumber: typeof convert.stringToNumber;\n\n            v2QuadraticBezierCurve: typeof bezierCurve.v2QuadraticBezierCurve;\n            v3QuadraticBezierCurve: typeof bezierCurve.v3QuadraticBezierCurve;\n            v2CubicBezierCurve: typeof bezierCurve.v2CubicBezierCurve;\n            v3CubicBezierCurve: typeof bezierCurve.v3CubicBezierCurve;\n        }\n    }\n}\n\nwindow.TCMath = window.TCMath || {\n    v2: vector.v2,\n    v3: vector.v3,\n    vN: vector.vN,\n    m2x2: matrix.m2x2,\n    m3x3: matrix.m3x3,\n    mNxM: matrix.mNxM,\n    identity2: matrix.identity2,\n    identity3: matrix.identity3,\n    identityN: matrix.identityN,\n\n    vEqual: vector.vEqual,\n    mEqual: matrix.mEqual,\n\n    vSum: vector.vSum,\n    v2Sum: vector.v2Sum,\n    v3Sum: vector.v3Sum,\n\n    vSub: vector.vSub,\n    v2Sub: vector.v2Sub,\n    v3Sub: vector.v3Sub,\n\n    vMulScalar: vector.vMulScalar,\n    v2MulScalar: vector.v2MulScalar,\n    v3MulScalar: vector.v3MulScalar,\n\n    vLength: vector.vLength,\n    v2Length: vector.v2Length,\n    v3Length: vector.v3Length,\n    v2SetLength: vector.v2SetLength,\n\n    vNormalize: vector.vNormalize,\n    v2Normalize: vector.v2Normalize,\n    v3Normalize: vector.v3Normalize,\n\n    vDotProduct: vector.vDotProduct,\n    v2DotProduct: vector.v2DotProduct,\n    v3DotProduct: vector.v3DotProduct,\n    v3CrossProduct: vector.v3CrossProduct,\n\n    mSum: matrix.mSum,\n    m2Sum: matrix.m2Sum,\n    m3Sum: matrix.m3Sum,\n\n    mSub: matrix.mSub,\n    m2Sub: matrix.m2Sub,\n    m3Sub: matrix.m3Sub,\n\n    mMulScalar: matrix.mMulScalar,\n    m2MulScalar: matrix.m2MulScalar,\n    m3MulScalar: matrix.m3MulScalar,\n\n    mTranspose: matrix.mTranspose,\n    m2Transpose: matrix.m2Transpose,\n    m3Transpose: matrix.m3Transpose,\n\n    mMul: matrix.mMul,\n    mMulVector: matrix.mMulVector,\n\n    mReset: matrix.mReset,\n    m2Reset: matrix.m2Reset,\n    m3Reset: matrix.m3Reset,\n\n    m2Rotation: matrix.m2Rotation,\n    v2Rotate: matrix.v2Rotate,\n    m3RotationX: matrix.m3RotationX,\n    v3RotateX: matrix.v3RotateX,\n    m3RotationY: matrix.m3RotationY,\n    v3RotateY: matrix.v3RotateY,\n    m3RotationZ: matrix.m3RotationZ,\n    v3RotateZ: matrix.v3RotateZ,\n\n    m2Scale: matrix.m2Scale,\n    v2Scale: matrix.v2Scale,\n    m3Scale: matrix.m3Scale,\n    v3Scale: matrix.v3Scale,\n\n    m2Determinant: matrix.m2Determinant,\n    m2Inverse: matrix.m2Inverse,\n    m2Adjugate: matrix.m2Adjugate,\n\n    getV2Angle: angle.getV2Angle,\n    setV2Angle: angle.setV2Angle,\n    radiansToDegrees: angle.radiansToDegrees,\n    degreesToRadians: angle.degreesToRadians,\n\n    setDecimalPlaces: format.setDecimalPlaces,\n\n    getRandom: random.getRandom,\n    getRandomInt: random.getRandomInt,\n    getRandomBoolean: random.getRandomBoolean,\n    getRandomItemFromArray: random.getRandomItemFromArray,\n\n    mod: other.mod,\n    convertRange: other.convertRange,\n    doRangesOverlap: other.doRangesOverlap,\n    isNumber: other.isNumber,\n\n    stringToNumber: convert.stringToNumber,\n\n    v2QuadraticBezierCurve: bezierCurve.v2QuadraticBezierCurve,\n    v3QuadraticBezierCurve: bezierCurve.v3QuadraticBezierCurve,\n    v2CubicBezierCurve: bezierCurve.v2CubicBezierCurve,\n    v3CubicBezierCurve: bezierCurve.v3CubicBezierCurve,\n};"],
  "mappings": ";;;;;;;AAAA,UAAYA,MAAY,WACxB,UAAYC,MAAY,WACxB,UAAYC,MAAY,WACxB,UAAYC,MAAW,UACvB,UAAYC,MAAY,WACxB,UAAYC,MAAW,UACvB,UAAYC,MAAa,YACzB,UAAYC,MAAiB,iBAgH7B,OAAO,OAAS,OAAO,QAAU,CAC7B,GAAIP,EAAO,GACX,GAAIA,EAAO,GACX,GAAIA,EAAO,GACX,KAAMC,EAAO,KACb,KAAMA,EAAO,KACb,KAAMA,EAAO,KACb,UAAWA,EAAO,UAClB,UAAWA,EAAO,UAClB,UAAWA,EAAO,UAElB,OAAQD,EAAO,OACf,OAAQC,EAAO,OAEf,KAAMD,EAAO,KACb,MAAOA,EAAO,MACd,MAAOA,EAAO,MAEd,KAAMA,EAAO,KACb,MAAOA,EAAO,MACd,MAAOA,EAAO,MAEd,WAAYA,EAAO,WACnB,YAAaA,EAAO,YACpB,YAAaA,EAAO,YAEpB,QAASA,EAAO,QAChB,SAAUA,EAAO,SACjB,SAAUA,EAAO,SACjB,YAAaA,EAAO,YAEpB,WAAYA,EAAO,WACnB,YAAaA,EAAO,YACpB,YAAaA,EAAO,YAEpB,YAAaA,EAAO,YACpB,aAAcA,EAAO,aACrB,aAAcA,EAAO,aACrB,eAAgBA,EAAO,eAEvB,KAAMC,EAAO,KACb,MAAOA,EAAO,MACd,MAAOA,EAAO,MAEd,KAAMA,EAAO,KACb,MAAOA,EAAO,MACd,MAAOA,EAAO,MAEd,WAAYA,EAAO,WACnB,YAAaA,EAAO,YACpB,YAAaA,EAAO,YAEpB,WAAYA,EAAO,WACnB,YAAaA,EAAO,YACpB,YAAaA,EAAO,YAEpB,KAAMA,EAAO,KACb,WAAYA,EAAO,WAEnB,OAAQA,EAAO,OACf,QAASA,EAAO,QAChB,QAASA,EAAO,QAEhB,WAAYA,EAAO,WACnB,SAAUA,EAAO,SACjB,YAAaA,EAAO,YACpB,UAAWA,EAAO,UAClB,YAAaA,EAAO,YACpB,UAAWA,EAAO,UAClB,YAAaA,EAAO,YACpB,UAAWA,EAAO,UAElB,QAASA,EAAO,QAChB,QAASA,EAAO,QAChB,QAASA,EAAO,QAChB,QAASA,EAAO,QAEhB,cAAeA,EAAO,cACtB,UAAWA,EAAO,UAClB,WAAYA,EAAO,WAEnB,WAAYE,EAAM,WAClB,WAAYA,EAAM,WAClB,iBAAkBA,EAAM,iBACxB,iBAAkBA,EAAM,iBAExB,iBAAkBD,EAAO,iBAEzB,UAAWE,EAAO,UAClB,aAAcA,EAAO,aACrB,iBAAkBA,EAAO,iBACzB,uBAAwBA,EAAO,uBAE/B,IAAKC,EAAM,IACX,aAAcA,EAAM,aACpB,gBAAiBA,EAAM,gBACvB,SAAUA,EAAM,SAEhB,eAAgBC,EAAQ,eAExB,uBAAwBC,EAAY,uBACpC,uBAAwBA,EAAY,uBACpC,mBAAoBA,EAAY,mBAChC,mBAAoBA,EAAY,kBACpC",
  "names": ["vector", "matrix", "format", "angle", "random", "other", "convert", "bezierCurve"]
}
