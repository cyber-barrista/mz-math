/* 
Tool Cool Math Helpers
Version: 1.0.15
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var w=Math.pow;var s=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=w(10,r);return Math.round(t*e)/e};var S=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return s(e,r)},C=(t,r,e=1/0)=>{let n=E(t);return[s(Math.cos(r)*n,e),s(Math.sin(r)*n,e)]},P=(t,r=1/0)=>{let e=t*(180/Math.PI);return s(e,r)},tt=(t,r=1/0)=>{let e=t*(Math.PI/180);return s(e,r)},D=(t,r,e=1/0)=>{let n=m(t),o=m(r),i=a(n,o),c=Math.acos(i);return s(c,e)},rt=(t,r,e=1/0)=>D(t,r,e),et=(t,r,e=1/0)=>D(t,r,e);var M=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]+r[o],e));return n},ct=(t,r,e=1/0)=>M(t,r,e),st=(t,r,e=1/0)=>M(t,r,e),h=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]-r[o],e));return n},ut=(t,r,e=1/0)=>h(t,r,e),xt=(t,r,e=1/0)=>h(t,r,e),f=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]*r,e));return n},pt=(t,r,e=1/0)=>f(t,r,e),at=(t,r,e=1/0)=>f(t,r,e),l=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]/r,e));return n},mt=(t,r,e=1/0)=>l(t,r,e),Mt=(t,r,e=1/0)=>l(t,r,e),y=(t,r=1/0)=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]*t[n];return s(Math.sqrt(e),r)},E=(t,r=1/0)=>y(t,r),ht=(t,r=1/0)=>y(t,r),ft=(t,r,e=1/0)=>{let n=S(t);return[s(Math.cos(n)*r,e),s(Math.sin(n)*r,e)]},m=(t,r=1/0)=>{let e=y(t),n=[];for(let o=0;o<t.length;o++)n.push(e===0?0:s(t[o]/e,r));return n},lt=(t,r=1/0)=>m(t,r),Vt=(t,r=1/0)=>m(t,r),a=(t,r,e=1/0)=>{let n=0;for(let o=0;o<t.length;o++)n+=t[o]*r[o];return s(n,e)},gt=(t,r,e=1/0)=>a(t,r,e),bt=(t,r,e=1/0)=>a(t,r,e),yt=(t,r,e=1/0)=>[s(t[1]*r[2]-t[2]*r[1],e),s(t[2]*r[0]-t[0]*r[2],e),s(t[0]*r[1]-t[1]*r[0],e)],vt=(t=0)=>[t,t],It=(t=0)=>[t,t,t],wt=(t=0)=>[t,t,t,t],d=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let n=0;n<t;n++)e.push(r);return e},R=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var T=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(M(t[o],r[o],e));return n},Et=(t,r,e=1/0)=>T(t,r,e),dt=(t,r,e=1/0)=>T(t,r,e),z=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(h(t[o],r[o],e));return n},Rt=(t,r,e=1/0)=>z(t,r,e),Tt=(t,r,e=1/0)=>z(t,r,e),A=(t,r,e=1/0)=>{let n=[];for(let o of t)n.push(f(o,r,e));return n},zt=(t,r,e=1/0)=>A(t,r,e),At=(t,r,e=1/0)=>A(t,r,e),v=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o of t)n.push(l(o,r,e));return n},J=(t,r,e=1/0)=>v(t,r,e),Nt=(t,r,e=1/0)=>v(t,r,e),V=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let n=[];for(let o=0;o<e;o++)n.push([]);for(let o=0;o<r;o++)for(let i=0;i<e;i++)n[i].push(t[o][i]);return n},jt=t=>V(t),qt=t=>V(t),N=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++){let o=t[n].length,i=[];for(let c=0;c<o;c++)i.push(r);e.push(i)}return e},Lt=(t,r=0)=>N(t,r),Bt=(t,r=0)=>N(t,r),Ft=(t=0)=>[[t,t],[t,t]],Gt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Qt=(t=0)=>[[t,t,t,t],[t,t,t,t],[t,t,t,t],[t,t,t,t]],Ht=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let n=[];for(let o=0;o<t;o++)n.push(d(r,e));return n},Ot=()=>[[1,0],[0,1]],Wt=()=>[[1,0,0],[0,1,0],[0,0,1]],kt=()=>[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],Jt=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let n=[];for(let o=0;o<t;o++)n.push(e===o?1:0);r.push(n)}return r},x=t=>{let r=[];for(let e=0;e<t.length;e++){let n=t[e],o=[];for(let i=0;i<n.length;i++)o.push(n[i]);r.push(o)}return r},j=t=>x(t),q=t=>x(t),Kt=(t,r)=>{if(t.length<=0)return[];let e=x(t);for(let n=0;n<e.length;n++)e[n].push(r[n]);return e},Ut=(t,r)=>{if(t.length<=0)return[];let e=x(t);for(let n=0;n<e.length;n++)e[n].unshift(r[n]);return e},Xt=(t,r)=>{let e=x(t);return e.push(r),e},Yt=(t,r)=>{let e=j(t);return e.push(r),e},Zt=(t,r)=>{let e=q(t);return e.push(r),e},_t=(t,r)=>{let e=x(t);return e.unshift(r),e},$t=(t,r)=>{let e=j(t);return e.unshift(r),e},Ct=(t,r)=>{let e=q(t);return e.unshift(r),e},Pt=t=>{if(t.length<=0)return[];let r=x(t);return r.pop(),r},tr=t=>{if(t.length<=0)return[];let r=x(t);return r.shift(),r},L=t=>{if(t.length<=0)return[];let r=x(t);for(let e=0;e<r.length;e++)r[e].pop();return r},rr=t=>{if(t.length<=0)return[];let r=x(t);for(let e=0;e<r.length;e++)r[e].shift();return r},er=t=>{if(t.length<=0)return[];let r=[];for(let e=0;e<t.length;e++)r.push(t[e][0]);return r},B=t=>{if(t.length<=0)return[];let r=t[0].length,e=[];for(let n=0;n<t.length;n++)e.push(t[n][r-1]);return e},nr=(t,r)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++)e.push(t[n][r]);return e},or=(t,r,e=1/0)=>{let n=[];for(let i=0;i<t.length;i++)n.push([]);let o=V(r);if(n.length!==o.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let i=0;i<t.length;i++){let c=t[i];for(let u=0;u<o.length;u++){let p=o[u],k=a(c,p,e);n[i].push(k)}}return n},g=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let n=[];for(let o=0;o<t.length;o++)n[o]=a(t[o],r,e);return n},ir=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!R(t[e],r[e]))return!1;return!0},K=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=[];for(let i=0;i<n;i++){if(i===r)continue;let c=[];for(let u=0;u<n;u++)u!==e&&c.push(t[i][u]);o.push(c)}return o},F=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=K(t,r,e);return b(o)},b=t=>{let r=t.length;if(r===0)return 1;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t[0][0];if(r===2)return G(t);let e=0;for(let n=0;n<r;n++){let o=F(t,0,n),i=t[0][n];n%2!==0&&(i=-i),e+=o*i}return e},G=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},cr=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return b(t)},Q=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]]},sr=t=>H(t),H=t=>{let r=t.length;if(r<=0)return null;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t;if(r===2)return Q(t);let e=[];for(let n=0;n<r;n++){let o=[];for(let i=0;i<r;i++){let c=F(t,n,i),u=Math.pow(-1,n+i);o.push(u*c)}e.push(o)}return V(e)},ur=t=>{if(t.length>0&&t.length!==t[0].length)throw new Error("The matrix must be square.");return b(t)===0},O=(t,r=1/0)=>{if(t.length>0&&t.length!==t[0].length)throw new Error("The matrix must be square.");let e=G(t);if(e===0)return null;let n=Q(t);return n===null?null:J(n,e,r)},W=(t,r=1/0)=>I(t,r),I=(t,r=1/0)=>{let e=t.length;if(e>0&&e!==t[0].length)throw new Error("The matrix must be square.");let n=b(t),o=H(t);return o===null?null:v(o,n,r)};var ar=(t,r,e=1/0)=>s(Math.random()*(r-t)+t,e),U=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),mr=()=>Math.random()<.5,Mr=t=>{let r=U(0,t.length-1);return t[r]};var fr=(t,r)=>(t%r+r)%r,lr=(t,r,e,n,o)=>(o-n)*(t-r)/(e-r)+n,Vr=(t,r,e,n)=>Math.max(t,e)<=Math.min(r,n),gr=t=>!isNaN(parseFloat(t))&&isFinite(t);var yr=(t,r)=>{var n;if(t==null)return r;let e=(n=Number(t))!=null?n:r;return isNaN(e)?r:e};var Ir=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1]]},wr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1],o*r[2]+i*e[2]+c*n[2]]},Sr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,p=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+p*o[0],i*r[1]+c*e[1]+u*n[1]+p*o[1]]},Dr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,p=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+p*o[0],i*r[1]+c*e[1]+u*n[1]+p*o[1],i*r[2]+c*e[2]+u*n[2]+p*o[2]]};var Rr=(t,r,e=1/0)=>{let n=[[t[0],t[1]],[r[0],r[1]]],o=O(n);if(o===null)return null;let i=[t[2],r[2]];return g(o,i,e)},Tr=(t,r,e,n=1/0)=>{let o=[[t[0],t[1],t[2]],[r[0],r[1],r[2]],[e[0],e[1],e[2]]],i=W(o);if(i===null)return null;let c=[t[3],r[3],e[3]];return g(i,c,n)},zr=(t,r=1/0)=>{if(t.length<=0)return null;let e=L(t),n=I(e);if(n===null)return null;let o=B(t);return g(n,o,r)};var Nr=(t,r,e)=>(r=r%Math.PI*2,[t[0]+Math.cos(r)*e,t[1]+Math.sin(r)*e]),jr=(t,r,e,n)=>(r=r%Math.PI*2,[t[0]+Math.cos(r)*e,t[1]+Math.sin(r)*n]),qr=(t,r,e,n)=>{let o=r*Math.sin(2*Math.PI*e*t+n);return[t,o]};export{Nr as circleMovement,lr as convertRange,tt as degreesToRadians,Vr as doRangesOverlap,jr as ellipseMovement,Rr as equationSystem2,Tr as equationSystem3,zr as equationSystemN,ar as getRandom,mr as getRandomBoolean,U as getRandomInt,Mr as getRandomItemFromArray,S as getV2Angle,rt as getV2AngleBetween,et as getV3AngleBetween,D as getVNAngleBetween,Ot as identity2,Wt as identity3,kt as identity4,Jt as identityN,gr as isNumber,ur as isSingularMatrix,Q as m2Adjugate,Yt as m2AppendRow,j as m2DeepCopy,G as m2Determinant,J as m2DivideScalar,O as m2Inverse,zt as m2MulScalar,$t as m2PrependRow,Lt as m2Reset,Rt as m2Sub,Et as m2Sum,jt as m2Transpose,Ft as m2x2,sr as m3Adjugate,Zt as m3AppendRow,q as m3DeepCopy,cr as m3Determinant,Nt as m3DivideScalar,W as m3Inverse,At as m3MulScalar,Ct as m3PrependRow,Bt as m3Reset,Tt as m3Sub,dt as m3Sum,qt as m3Transpose,Gt as m3x3,Qt as m4x4,H as mAdjugate,Kt as mAppendCol,Xt as mAppendRow,x as mDeepCopy,rr as mDelFirstColumn,tr as mDelFirstRow,L as mDelLastColumn,Pt as mDelLastRow,b as mDeterminant,v as mDivideScalar,ir as mEqual,nr as mGetColumn,er as mGetFirstColumn,B as mGetLastColumn,I as mInverse,F as mMinor,or as mMul,A as mMulScalar,g as mMulVector,Ht as mNxM,Ut as mPrependCol,_t as mPrependRow,N as mReset,z as mSub,T as mSum,V as mTranspose,fr as mod,P as radiansToDegrees,s as setDecimalPlaces,C as setV2Angle,qr as sineWaveMovement,yr as stringToNumber,vt as v2,Sr as v2CubicBezierCurve,mt as v2DivideScalar,gt as v2DotProduct,E as v2Length,pt as v2MulScalar,lt as v2Normalize,Ir as v2QuadraticBezierCurve,ft as v2SetLength,ut as v2Sub,ct as v2Sum,It as v3,yt as v3CrossProduct,Dr as v3CubicBezierCurve,Mt as v3DivideScalar,bt as v3DotProduct,ht as v3Length,at as v3MulScalar,Vt as v3Normalize,wr as v3QuadraticBezierCurve,xt as v3Sub,st as v3Sum,wt as v4,l as vDivideScalar,a as vDotProduct,R as vEqual,y as vLength,f as vMulScalar,d as vN,m as vNormalize,h as vSub,M as vSum};
//# sourceMappingURL=tc-math.esm.js.map
