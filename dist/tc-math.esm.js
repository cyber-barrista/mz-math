/* 
Tool Cool Math Helpers
Version: 1.0.9
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var g=Math.pow;var s=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=g(10,r);return Math.round(t*e)/e};var v=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return s(e,r)},$=(t,r,e=1/0)=>{let o=y(t);return[s(Math.cos(r)*o,e),s(Math.sin(r)*o,e)]},C=(t,r=1/0)=>{let e=t*(180/Math.PI);return s(e,r)},P=(t,r=1/0)=>{let e=t*(Math.PI/180);return s(e,r)};var p=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(s(t[n]+r[n],e));return o},ot=(t,r,e=1/0)=>p(t,r,e),nt=(t,r,e=1/0)=>p(t,r,e),M=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(s(t[n]-r[n],e));return o},it=(t,r,e=1/0)=>M(t,r,e),ct=(t,r,e=1/0)=>M(t,r,e),h=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(s(t[n]*r,e));return o},st=(t,r,e=1/0)=>h(t,r,e),ut=(t,r,e=1/0)=>h(t,r,e),f=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let o=[];for(let n=0;n<t.length;n++)o.push(s(t[n]/r,e));return o},xt=(t,r,e=1/0)=>f(t,r,e),at=(t,r,e=1/0)=>f(t,r,e),b=(t,r=1/0)=>{let e=0;for(let o=0;o<t.length;o++)e+=t[o]*t[o];return s(Math.sqrt(e),r)},y=(t,r=1/0)=>b(t,r),mt=(t,r=1/0)=>b(t,r),pt=(t,r,e=1/0)=>{let o=v(t);return[s(Math.cos(o)*r,e),s(Math.sin(o)*r,e)]},I=(t,r=1/0)=>{let e=b(t),o=[];for(let n=0;n<t.length;n++)o.push(e===0?0:s(t[n]/e,r));return o},w=(t,r=1/0)=>I(t,r),V=(t,r=1/0)=>I(t,r),m=(t,r,e=1/0)=>{let o=0;for(let n=0;n<t.length;n++)o+=t[n]*r[n];return s(o,e)},Mt=(t,r,e=1/0)=>m(t,r,e),ht=(t,r,e=1/0)=>m(t,r,e),ft=(t,r,e=1/0)=>[s(t[1]*r[2]-t[2]*r[1],e),s(t[2]*r[0]-t[0]*r[2],e),s(t[0]*r[1]-t[1]*r[0],e)],Vt=(t=0)=>[t,t],bt=(t=0)=>[t,t,t],S=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let o=0;o<t;o++)e.push(r);return e},D=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var E=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(p(t[n],r[n],e));return o},vt=(t,r,e=1/0)=>E(t,r,e),yt=(t,r,e=1/0)=>E(t,r,e),T=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(M(t[n],r[n],e));return o},It=(t,r,e=1/0)=>T(t,r,e),wt=(t,r,e=1/0)=>T(t,r,e),z=(t,r,e=1/0)=>{let o=[];for(let n of t)o.push(h(n,r,e));return o},St=(t,r,e=1/0)=>z(t,r,e),Dt=(t,r,e=1/0)=>z(t,r,e),N=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let o=[];for(let n of t)o.push(f(n,r,e));return o},L=(t,r,e=1/0)=>N(t,r,e),Et=(t,r,e=1/0)=>N(t,r,e),l=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let o=[];for(let n=0;n<e;n++)o.push([]);for(let n=0;n<r;n++)for(let i=0;i<e;i++)o[i].push(t[n][i]);return o},Tt=t=>l(t),zt=t=>l(t),q=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let o=0;o<t.length;o++){let n=t[o].length,i=[];for(let c=0;c<n;c++)i.push(r);e.push(i)}return e},Nt=(t,r=0)=>q(t,r),qt=(t,r=0)=>q(t,r),dt=(t=0)=>[[t,t],[t,t]],jt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Rt=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let o=[];for(let n=0;n<t;n++)o.push(S(r,e));return o},Bt=()=>[[1,0],[0,1]],Lt=()=>[[1,0,0],[0,1,0],[0,0,1]],At=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let o=[];for(let n=0;n<t;n++)o.push(e===n?1:0);r.push(o)}return r},Ft=(t,r,e=1/0)=>{let o=[];for(let i=0;i<t.length;i++)o.push([]);let n=l(r);if(o.length!==n.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let i=0;i<t.length;i++){let c=t[i];for(let u=0;u<n.length;u++){let x=n[u],B=m(c,x,e);o[i].push(B)}}return o},a=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let o=[];for(let n=0;n<t.length;n++)o[n]=m(t[n],r,e);return o},Qt=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!D(t[e],r[e]))return!1;return!0},A=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],Xt=(t,r)=>{let e=w(r);return a(A(t),e)},F=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],Yt=(t,r)=>{let e=V(r);return a(F(t),e)},Q=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],Zt=(t,r)=>{let e=V(r);return a(Q(t),e)},X=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],Ht=(t,r)=>{let e=V(r);return a(X(t),e)},Y=t=>[[t[0],0],[0,t[1]]],Ot=(t,r)=>a(Y(t),r),Z=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],kt=(t,r)=>a(Z(t),r),H=(t,r,e)=>{let o=t.length;if(o<=0)throw new Error("The matrix should not be empty.");if(o!==t[0].length)throw new Error("The matrix must be square.");let n=[];for(let i=0;i<o;i++){if(i===r)continue;let c=[];for(let u=0;u<o;u++)u!==e&&c.push(t[i][u]);n.push(c)}return n},O=(t,r,e)=>{let o=t.length;if(o<=0)throw new Error("The matrix should not be empty.");if(o!==t[0].length)throw new Error("The matrix must be square.");let n=H(t,r,e);return d(n)},d=t=>{let r=t.length;if(r===0)return 1;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t[0][0];if(r===2)return j(t);let e=0;for(let o=0;o<r;o++){let n=O(t,0,o),i=t[0][o];o%2!==0&&(i=-i),e+=n*i}return e},j=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},Gt=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return d(t)},k=t=>[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]],R=(t,r=1/0)=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=j(t);if(e===0)return null;let o=k(t);return L(o,e,r)};var Ut=(t,r,e=1/0)=>s(Math.random()*(r-t)+t,e),G=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),Wt=()=>Math.random()<.5,_t=t=>{let r=G(0,t.length-1);return t[r]};var Ct=(t,r)=>(t%r+r)%r,Pt=(t,r,e,o,n)=>(n-o)*(t-r)/(e-r)+o,tr=(t,r,e,o)=>Math.max(t,e)<=Math.min(r,o),rr=t=>!isNaN(parseFloat(t))&&isFinite(t);var or=(t,r)=>{var o;if(t==null)return r;let e=(o=Number(t))!=null?o:r;return isNaN(e)?r:e};var ir=(t,r,e,o)=>{let n=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[n*r[0]+i*e[0]+c*o[0],n*r[1]+i*e[1]+c*o[1]]},cr=(t,r,e,o)=>{let n=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[n*r[0]+i*e[0]+c*o[0],n*r[1]+i*e[1]+c*o[1],n*r[2]+i*e[2]+c*o[2]]},sr=(t,r,e,o,n)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,x=t*t*t;return[i*r[0]+c*e[0]+u*o[0]+x*n[0],i*r[1]+c*e[1]+u*o[1]+x*n[1]]},ur=(t,r,e,o,n)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,x=t*t*t;return[i*r[0]+c*e[0]+u*o[0]+x*n[0],i*r[1]+c*e[1]+u*o[1]+x*n[1],i*r[2]+c*e[2]+u*o[2]+x*n[2]]};var mr=(t,r,e=1/0)=>{let o=[[t[0],t[1]],[r[0],r[1]]],n=R(o);if(n===null)return null;let i=[t[2],r[2]];return a(n,i,e)};export{Pt as convertRange,P as degreesToRadians,tr as doRangesOverlap,mr as equationSystem2,Ut as getRandom,Wt as getRandomBoolean,G as getRandomInt,_t as getRandomItemFromArray,v as getV2Angle,Bt as identity2,Lt as identity3,At as identityN,rr as isNumber,k as m2Adjugate,j as m2Determinant,L as m2DivideScalar,R as m2Inverse,St as m2MulScalar,Nt as m2Reset,A as m2Rotation,Y as m2Scale,It as m2Sub,vt as m2Sum,Tt as m2Transpose,dt as m2x2,Gt as m3Determinant,Et as m3DivideScalar,Dt as m3MulScalar,qt as m3Reset,F as m3RotationX,Q as m3RotationY,X as m3RotationZ,Z as m3Scale,wt as m3Sub,yt as m3Sum,zt as m3Transpose,jt as m3x3,d as mDeterminant,N as mDivideScalar,Qt as mEqual,O as mMinor,Ft as mMul,z as mMulScalar,a as mMulVector,Rt as mNxM,q as mReset,T as mSub,E as mSum,l as mTranspose,Ct as mod,C as radiansToDegrees,s as setDecimalPlaces,$ as setV2Angle,or as stringToNumber,Vt as v2,sr as v2CubicBezierCurve,xt as v2DivideScalar,Mt as v2DotProduct,y as v2Length,st as v2MulScalar,w as v2Normalize,ir as v2QuadraticBezierCurve,Xt as v2Rotate,Ot as v2Scale,pt as v2SetLength,it as v2Sub,ot as v2Sum,bt as v3,ft as v3CrossProduct,ur as v3CubicBezierCurve,at as v3DivideScalar,ht as v3DotProduct,mt as v3Length,ut as v3MulScalar,V as v3Normalize,cr as v3QuadraticBezierCurve,Yt as v3RotateX,Zt as v3RotateY,Ht as v3RotateZ,kt as v3Scale,ct as v3Sub,nt as v3Sum,f as vDivideScalar,m as vDotProduct,D as vEqual,b as vLength,h as vMulScalar,S as vN,I as vNormalize,M as vSub,p as vSum};
//# sourceMappingURL=tc-math.esm.js.map
