/* 
Tool Cool Math Helpers
Version: 1.0.6
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var g=Math.pow;var i=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=g(10,r);return Math.round(t*e)/e};var I=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return i(e,r)},J=(t,r,e=1/0)=>{let o=y(t);return[i(Math.cos(r)*o,e),i(Math.sin(r)*o,e)]},K=(t,r=1/0)=>{let e=t*(180/Math.PI);return i(e,r)},U=(t,r=1/0)=>{let e=t*(Math.PI/180);return i(e,r)};var m=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]+r[n],e));return o},d=(t,r,e=1/0)=>m(t,r,e),C=(t,r,e=1/0)=>m(t,r,e),M=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]-r[n],e));return o},P=(t,r,e=1/0)=>M(t,r,e),tt=(t,r,e=1/0)=>M(t,r,e),h=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]*r,e));return o},rt=(t,r,e=1/0)=>h(t,r,e),et=(t,r,e=1/0)=>h(t,r,e),f=(t,r=1/0)=>{let e=0;for(let o=0;o<t.length;o++)e+=t[o]*t[o];return i(Math.sqrt(e),r)},y=(t,r=1/0)=>f(t,r),ot=(t,r=1/0)=>f(t,r),nt=(t,r,e=1/0)=>{let o=I(t);return[i(Math.cos(o)*r,e),i(Math.sin(o)*r,e)]},l=(t,r=1/0)=>{let e=f(t),o=[];for(let n=0;n<t.length;n++)o.push(e===0?0:i(t[n]/e,r));return o},v=(t,r=1/0)=>l(t,r),V=(t,r=1/0)=>l(t,r),p=(t,r,e=1/0)=>{let o=0;for(let n=0;n<t.length;n++)o+=t[n]*r[n];return i(o,e)},ct=(t,r,e=1/0)=>p(t,r,e),it=(t,r,e=1/0)=>p(t,r,e),st=(t,r,e=1/0)=>[i(t[1]*r[2]-t[2]*r[1],e),i(t[2]*r[0]-t[0]*r[2],e),i(t[0]*r[1]-t[1]*r[0],e)],ut=(t=0)=>[t,t],xt=(t=0)=>[t,t,t],S=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let o=0;o<t;o++)e.push(r);return e},w=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var N=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(m(t[n],r[n],e));return o},mt=(t,r,e=1/0)=>N(t,r,e),Mt=(t,r,e=1/0)=>N(t,r,e),z=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(M(t[n],r[n],e));return o},ht=(t,r,e=1/0)=>z(t,r,e),Vt=(t,r,e=1/0)=>z(t,r,e),D=(t,r,e=1/0)=>{let o=[];for(let n of t)o.push(h(n,r,e));return o},q=(t,r,e=1/0)=>D(t,r,e),ft=(t,r,e=1/0)=>D(t,r,e),b=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let o=[];for(let n=0;n<e;n++)o.push([]);for(let n=0;n<r;n++)for(let c=0;c<e;c++)o[c].push(t[n][c]);return o},bt=t=>b(t),gt=t=>b(t),E=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let o=0;o<t.length;o++){let n=t[o].length,c=[];for(let s=0;s<n;s++)c.push(r);e.push(c)}return e},It=(t,r=0)=>E(t,r),yt=(t,r=0)=>E(t,r),lt=(t=0)=>[[t,t],[t,t]],vt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],St=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let o=[];for(let n=0;n<t;n++)o.push(S(r,e));return o},wt=()=>[[1,0],[0,1]],Nt=()=>[[1,0,0],[0,1,0],[0,0,1]],zt=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let o=[];for(let n=0;n<t;n++)o.push(e===n?1:0);r.push(o)}return r},Dt=(t,r,e=1/0)=>{let o=[];for(let c=0;c<t.length;c++)o.push([]);let n=b(r);if(o.length!==n.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let c=0;c<t.length;c++){let s=t[c];for(let u=0;u<n.length;u++){let x=n[u],T=p(s,x,e);o[c].push(T)}}return o},a=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let o=[];for(let n=0;n<t.length;n++)o[n]=p(t[n],r,e);return o},Et=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!w(t[e],r[e]))return!1;return!0},j=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],Tt=(t,r)=>{let e=v(r);return a(j(t),e)},B=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],qt=(t,r)=>{let e=V(r);return a(B(t),e)},L=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],jt=(t,r)=>{let e=V(r);return a(L(t),e)},R=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],Bt=(t,r)=>{let e=V(r);return a(R(t),e)},A=t=>[[t[0],0],[0,t[1]]],Lt=(t,r)=>a(A(t),r),F=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],Rt=(t,r)=>a(F(t),r),Q=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},X=t=>[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]],At=(t,r=1/0)=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=Q(t);if(e===0)return null;let o=X(t);return q(o,1/e,r)};var Xt=(t,r,e=1/0)=>i(Math.random()*(r-t)+t,e),Y=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),Yt=()=>Math.random()<.5,Zt=t=>{let r=Y(0,t.length-1);return t[r]};var kt=(t,r)=>(t%r+r)%r,Gt=(t,r,e,o,n)=>(n-o)*(t-r)/(e-r)+o,Ht=(t,r,e,o)=>Math.max(t,e)<=Math.min(r,o),Jt=t=>!isNaN(parseFloat(t))&&isFinite(t);var Ut=(t,r)=>{var o;if(t==null)return r;let e=(o=Number(t))!=null?o:r;return isNaN(e)?r:e};var _t=(t,r,e,o)=>{let n=Math.pow(1-t,2),c=(1-t)*2*t,s=t*t;return[n*r[0]+c*e[0]+s*o[0],n*r[1]+c*e[1]+s*o[1]]},$t=(t,r,e,o)=>{let n=Math.pow(1-t,2),c=(1-t)*2*t,s=t*t;return[n*r[0]+c*e[0]+s*o[0],n*r[1]+c*e[1]+s*o[1],n*r[2]+c*e[2]+s*o[2]]},dt=(t,r,e,o,n)=>{let c=Math.pow(1-t,3),s=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,x=t*t*t;return[c*r[0]+s*e[0]+u*o[0]+x*n[0],c*r[1]+s*e[1]+u*o[1]+x*n[1]]},Ct=(t,r,e,o,n)=>{let c=Math.pow(1-t,3),s=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,x=t*t*t;return[c*r[0]+s*e[0]+u*o[0]+x*n[0],c*r[1]+s*e[1]+u*o[1]+x*n[1],c*r[2]+s*e[2]+u*o[2]+x*n[2]]};export{Gt as convertRange,U as degreesToRadians,Ht as doRangesOverlap,Xt as getRandom,Yt as getRandomBoolean,Y as getRandomInt,Zt as getRandomItemFromArray,I as getV2Angle,wt as identity2,Nt as identity3,zt as identityN,Jt as isNumber,X as m2Adjugate,Q as m2Determinant,At as m2Inverse,q as m2MulScalar,It as m2Reset,j as m2Rotation,A as m2Scale,ht as m2Sub,mt as m2Sum,bt as m2Transpose,lt as m2x2,ft as m3MulScalar,yt as m3Reset,B as m3RotationX,L as m3RotationY,R as m3RotationZ,F as m3Scale,Vt as m3Sub,Mt as m3Sum,gt as m3Transpose,vt as m3x3,Et as mEqual,Dt as mMul,D as mMulScalar,a as mMulVector,St as mNxM,E as mReset,z as mSub,N as mSum,b as mTranspose,kt as mod,K as radiansToDegrees,i as setDecimalPlaces,J as setV2Angle,Ut as stringToNumber,ut as v2,dt as v2CubicBezierCurve,ct as v2DotProduct,y as v2Length,rt as v2MulScalar,v as v2Normalize,_t as v2QuadraticBezierCurve,Tt as v2Rotate,Lt as v2Scale,nt as v2SetLength,P as v2Sub,d as v2Sum,xt as v3,st as v3CrossProduct,Ct as v3CubicBezierCurve,it as v3DotProduct,ot as v3Length,et as v3MulScalar,V as v3Normalize,$t as v3QuadraticBezierCurve,qt as v3RotateX,jt as v3RotateY,Bt as v3RotateZ,Rt as v3Scale,tt as v3Sub,C as v3Sum,p as vDotProduct,w as vEqual,f as vLength,h as vMulScalar,S as vN,l as vNormalize,M as vSub,m as vSum};
//# sourceMappingURL=tc-math.esm.js.map
