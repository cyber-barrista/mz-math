/* 
Tool Cool Math Helpers
Version: 1.0.14
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var w=Math.pow;var s=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=w(10,r);return Math.round(t*e)/e};var S=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return s(e,r)},ot=(t,r,e=1/0)=>{let n=D(t);return[s(Math.cos(r)*n,e),s(Math.sin(r)*n,e)]},it=(t,r=1/0)=>{let e=t*(180/Math.PI);return s(e,r)},ct=(t,r=1/0)=>{let e=t*(Math.PI/180);return s(e,r)};var m=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]+r[o],e));return n},at=(t,r,e=1/0)=>m(t,r,e),pt=(t,r,e=1/0)=>m(t,r,e),h=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]-r[o],e));return n},Mt=(t,r,e=1/0)=>h(t,r,e),mt=(t,r,e=1/0)=>h(t,r,e),f=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]*r,e));return n},ht=(t,r,e=1/0)=>f(t,r,e),ft=(t,r,e=1/0)=>f(t,r,e),l=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]/r,e));return n},lt=(t,r,e=1/0)=>l(t,r,e),Vt=(t,r,e=1/0)=>l(t,r,e),g=(t,r=1/0)=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]*t[n];return s(Math.sqrt(e),r)},D=(t,r=1/0)=>g(t,r),bt=(t,r=1/0)=>g(t,r),gt=(t,r,e=1/0)=>{let n=S(t);return[s(Math.cos(n)*r,e),s(Math.sin(n)*r,e)]},d=(t,r=1/0)=>{let e=g(t),n=[];for(let o=0;o<t.length;o++)n.push(e===0?0:s(t[o]/e,r));return n},E=(t,r=1/0)=>d(t,r),V=(t,r=1/0)=>d(t,r),M=(t,r,e=1/0)=>{let n=0;for(let o=0;o<t.length;o++)n+=t[o]*r[o];return s(n,e)},yt=(t,r,e=1/0)=>M(t,r,e),vt=(t,r,e=1/0)=>M(t,r,e),It=(t,r,e=1/0)=>[s(t[1]*r[2]-t[2]*r[1],e),s(t[2]*r[0]-t[0]*r[2],e),s(t[0]*r[1]-t[1]*r[0],e)],wt=(t=0)=>[t,t],St=(t=0)=>[t,t,t],z=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let n=0;n<t;n++)e.push(r);return e},T=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var R=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(m(t[o],r[o],e));return n},Et=(t,r,e=1/0)=>R(t,r,e),zt=(t,r,e=1/0)=>R(t,r,e),N=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(h(t[o],r[o],e));return n},Tt=(t,r,e=1/0)=>N(t,r,e),Rt=(t,r,e=1/0)=>N(t,r,e),j=(t,r,e=1/0)=>{let n=[];for(let o of t)n.push(f(o,r,e));return n},Nt=(t,r,e=1/0)=>j(t,r,e),jt=(t,r,e=1/0)=>j(t,r,e),y=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o of t)n.push(l(o,r,e));return n},O=(t,r,e=1/0)=>y(t,r,e),At=(t,r,e=1/0)=>y(t,r,e),b=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let n=[];for(let o=0;o<e;o++)n.push([]);for(let o=0;o<r;o++)for(let i=0;i<e;i++)n[i].push(t[o][i]);return n},Lt=t=>b(t),qt=t=>b(t),A=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++){let o=t[n].length,i=[];for(let c=0;c<o;c++)i.push(r);e.push(i)}return e},Ft=(t,r=0)=>A(t,r),Bt=(t,r=0)=>A(t,r),Gt=(t=0)=>[[t,t],[t,t]],Qt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Xt=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let n=[];for(let o=0;o<t;o++)n.push(z(r,e));return n},Yt=()=>[[1,0],[0,1]],Zt=()=>[[1,0,0],[0,1,0],[0,0,1]],Ht=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let n=[];for(let o=0;o<t;o++)n.push(e===o?1:0);r.push(n)}return r},x=t=>{let r=[];for(let e=0;e<t.length;e++){let n=t[e],o=[];for(let i=0;i<n.length;i++)o.push(n[i]);r.push(o)}return r},L=t=>x(t),q=t=>x(t),Ot=(t,r)=>{if(t.length<=0)return[];let e=x(t);for(let n=0;n<e.length;n++)e[n].push(r[n]);return e},kt=(t,r)=>{if(t.length<=0)return[];let e=x(t);for(let n=0;n<e.length;n++)e[n].unshift(r[n]);return e},Jt=(t,r)=>{let e=x(t);return e.push(r),e},Kt=(t,r)=>{let e=L(t);return e.push(r),e},Ut=(t,r)=>{let e=q(t);return e.push(r),e},Wt=(t,r)=>{let e=x(t);return e.unshift(r),e},_t=(t,r)=>{let e=L(t);return e.unshift(r),e},$t=(t,r)=>{let e=q(t);return e.unshift(r),e},Ct=t=>{if(t.length<=0)return[];let r=x(t);return r.pop(),r},Pt=t=>{if(t.length<=0)return[];let r=x(t);return r.shift(),r},F=t=>{if(t.length<=0)return[];let r=x(t);for(let e=0;e<r.length;e++)r[e].pop();return r},tr=t=>{if(t.length<=0)return[];let r=x(t);for(let e=0;e<r.length;e++)r[e].shift();return r},rr=t=>{if(t.length<=0)return[];let r=[];for(let e=0;e<t.length;e++)r.push(t[e][0]);return r},er=t=>{if(t.length<=0)return[];let r=t[0].length,e=[];for(let n=0;n<t.length;n++)e.push(t[n][r-1]);return e},nr=(t,r)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++)e.push(t[n][r]);return e},or=(t,r,e=1/0)=>{let n=[];for(let i=0;i<t.length;i++)n.push([]);let o=b(r);if(n.length!==o.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let i=0;i<t.length;i++){let c=t[i];for(let u=0;u<o.length;u++){let p=o[u],H=M(c,p,e);n[i].push(H)}}return n},a=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let n=[];for(let o=0;o<t.length;o++)n[o]=M(t[o],r,e);return n},ir=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!T(t[e],r[e]))return!1;return!0},k=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],cr=(t,r)=>{let e=E(r);return a(k(t),e)},J=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],sr=(t,r)=>{let e=V(r);return a(J(t),e)},K=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],ur=(t,r)=>{let e=V(r);return a(K(t),e)},U=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],xr=(t,r)=>{let e=V(r);return a(U(t),e)},W=t=>[[t[0],0],[0,t[1]]],ar=(t,r)=>a(W(t),r),_=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],pr=(t,r)=>a(_(t),r),$=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=[];for(let i=0;i<n;i++){if(i===r)continue;let c=[];for(let u=0;u<n;u++)u!==e&&c.push(t[i][u]);o.push(c)}return o},B=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=$(t,r,e);return v(o)},v=t=>{let r=t.length;if(r===0)return 1;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t[0][0];if(r===2)return G(t);let e=0;for(let n=0;n<r;n++){let o=B(t,0,n),i=t[0][n];n%2!==0&&(i=-i),e+=o*i}return e},G=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},Mr=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return v(t)},Q=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]]},mr=t=>X(t),X=t=>{let r=t.length;if(r<=0)return null;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t;if(r===2)return Q(t);let e=[];for(let n=0;n<r;n++){let o=[];for(let i=0;i<r;i++){let c=B(t,n,i),u=Math.pow(-1,n+i);o.push(u*c)}e.push(o)}return b(e)},Y=(t,r=1/0)=>{if(t.length<=0)return null;if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=G(t);if(e===0)return null;let n=Q(t);return n===null?null:O(n,e,r)},Z=(t,r=1/0)=>I(t,r),I=(t,r=1/0)=>{let e=t.length;if(e<=0)return null;if(e!==t[0].length)throw new Error("The matrix must be square.");let n=v(t),o=X(t);return o===null?null:y(o,n,r)};var lr=(t,r,e=1/0)=>s(Math.random()*(r-t)+t,e),C=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),Vr=()=>Math.random()<.5,br=t=>{let r=C(0,t.length-1);return t[r]};var yr=(t,r)=>(t%r+r)%r,vr=(t,r,e,n,o)=>(o-n)*(t-r)/(e-r)+n,Ir=(t,r,e,n)=>Math.max(t,e)<=Math.min(r,n),wr=t=>!isNaN(parseFloat(t))&&isFinite(t);var Dr=(t,r)=>{var n;if(t==null)return r;let e=(n=Number(t))!=null?n:r;return isNaN(e)?r:e};var Er=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1]]},zr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1],o*r[2]+i*e[2]+c*n[2]]},Tr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,p=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+p*o[0],i*r[1]+c*e[1]+u*n[1]+p*o[1]]},Rr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,p=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+p*o[0],i*r[1]+c*e[1]+u*n[1]+p*o[1],i*r[2]+c*e[2]+u*n[2]+p*o[2]]};var Ar=(t,r,e=1/0)=>{let n=[[t[0],t[1]],[r[0],r[1]]],o=Y(n);if(o===null)return null;let i=[t[2],r[2]];return a(o,i,e)},Lr=(t,r,e,n=1/0)=>{let o=[[t[0],t[1],t[2]],[r[0],r[1],r[2]],[e[0],e[1],e[2]]],i=Z(o);if(i===null)return null;let c=[t[3],r[3],e[3]];return a(i,c,n)},qr=(t,r=1/0)=>{if(t.length<=0)return null;let e=t.length,n=F(t),o=I(n);if(o===null)return null;let i=[];for(let c=0;c<e;c++){let u=t[c];i.push(u[u.length-1])}return a(o,i,r)};export{vr as convertRange,ct as degreesToRadians,Ir as doRangesOverlap,Ar as equationSystem2,Lr as equationSystem3,qr as equationSystemN,lr as getRandom,Vr as getRandomBoolean,C as getRandomInt,br as getRandomItemFromArray,S as getV2Angle,Yt as identity2,Zt as identity3,Ht as identityN,wr as isNumber,Q as m2Adjugate,Kt as m2AppendRow,L as m2DeepCopy,G as m2Determinant,O as m2DivideScalar,Y as m2Inverse,Nt as m2MulScalar,_t as m2PrependRow,Ft as m2Reset,k as m2Rotation,W as m2Scale,Tt as m2Sub,Et as m2Sum,Lt as m2Transpose,Gt as m2x2,mr as m3Adjugate,Ut as m3AppendRow,q as m3DeepCopy,Mr as m3Determinant,At as m3DivideScalar,Z as m3Inverse,jt as m3MulScalar,$t as m3PrependRow,Bt as m3Reset,J as m3RotationX,K as m3RotationY,U as m3RotationZ,_ as m3Scale,Rt as m3Sub,zt as m3Sum,qt as m3Transpose,Qt as m3x3,X as mAdjugate,Ot as mAppendCol,Jt as mAppendRow,x as mDeepCopy,tr as mDelFirstColumn,Pt as mDelFirstRow,F as mDelLastColumn,Ct as mDelLastRow,v as mDeterminant,y as mDivideScalar,ir as mEqual,nr as mGetColumn,rr as mGetFirstColumn,er as mGetLastColumn,I as mInverse,B as mMinor,or as mMul,j as mMulScalar,a as mMulVector,Xt as mNxM,kt as mPrependCol,Wt as mPrependRow,A as mReset,N as mSub,R as mSum,b as mTranspose,yr as mod,it as radiansToDegrees,s as setDecimalPlaces,ot as setV2Angle,Dr as stringToNumber,wt as v2,Tr as v2CubicBezierCurve,lt as v2DivideScalar,yt as v2DotProduct,D as v2Length,ht as v2MulScalar,E as v2Normalize,Er as v2QuadraticBezierCurve,cr as v2Rotate,ar as v2Scale,gt as v2SetLength,Mt as v2Sub,at as v2Sum,St as v3,It as v3CrossProduct,Rr as v3CubicBezierCurve,Vt as v3DivideScalar,vt as v3DotProduct,bt as v3Length,ft as v3MulScalar,V as v3Normalize,zr as v3QuadraticBezierCurve,sr as v3RotateX,ur as v3RotateY,xr as v3RotateZ,pr as v3Scale,mt as v3Sub,pt as v3Sum,l as vDivideScalar,M as vDotProduct,T as vEqual,g as vLength,f as vMulScalar,z as vN,d as vNormalize,h as vSub,m as vSum};
//# sourceMappingURL=tc-math.esm.js.map
