/* 
Tool Cool Math Helpers
Version: 1.0.9
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var v=Math.pow;var i=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=v(10,r);return Math.round(t*e)/e};var y=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return i(e,r)},U=(t,r,e=1/0)=>{let o=I(t);return[i(Math.cos(r)*o,e),i(Math.sin(r)*o,e)]},W=(t,r=1/0)=>{let e=t*(180/Math.PI);return i(e,r)},_=(t,r=1/0)=>{let e=t*(Math.PI/180);return i(e,r)};var p=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]+r[n],e));return o},tt=(t,r,e=1/0)=>p(t,r,e),rt=(t,r,e=1/0)=>p(t,r,e),M=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]-r[n],e));return o},et=(t,r,e=1/0)=>M(t,r,e),ot=(t,r,e=1/0)=>M(t,r,e),V=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]*r,e));return o},nt=(t,r,e=1/0)=>V(t,r,e),ct=(t,r,e=1/0)=>V(t,r,e),h=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]/r,e));return o},it=(t,r,e=1/0)=>h(t,r,e),st=(t,r,e=1/0)=>h(t,r,e),b=(t,r=1/0)=>{let e=0;for(let o=0;o<t.length;o++)e+=t[o]*t[o];return i(Math.sqrt(e),r)},I=(t,r=1/0)=>b(t,r),ut=(t,r=1/0)=>b(t,r),xt=(t,r,e=1/0)=>{let o=y(t);return[i(Math.cos(o)*r,e),i(Math.sin(o)*r,e)]},g=(t,r=1/0)=>{let e=b(t),o=[];for(let n=0;n<t.length;n++)o.push(e===0?0:i(t[n]/e,r));return o},S=(t,r=1/0)=>g(t,r),f=(t,r=1/0)=>g(t,r),m=(t,r,e=1/0)=>{let o=0;for(let n=0;n<t.length;n++)o+=t[n]*r[n];return i(o,e)},at=(t,r,e=1/0)=>m(t,r,e),mt=(t,r,e=1/0)=>m(t,r,e),pt=(t,r,e=1/0)=>[i(t[1]*r[2]-t[2]*r[1],e),i(t[2]*r[0]-t[0]*r[2],e),i(t[0]*r[1]-t[1]*r[0],e)],Mt=(t=0)=>[t,t],Vt=(t=0)=>[t,t,t],w=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let o=0;o<t;o++)e.push(r);return e},D=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var z=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(p(t[n],r[n],e));return o},bt=(t,r,e=1/0)=>z(t,r,e),lt=(t,r,e=1/0)=>z(t,r,e),E=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(M(t[n],r[n],e));return o},vt=(t,r,e=1/0)=>E(t,r,e),yt=(t,r,e=1/0)=>E(t,r,e),N=(t,r,e=1/0)=>{let o=[];for(let n of t)o.push(V(n,r,e));return o},It=(t,r,e=1/0)=>N(t,r,e),gt=(t,r,e=1/0)=>N(t,r,e),T=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let o=[];for(let n of t)o.push(h(n,r,e));return o},B=(t,r,e=1/0)=>T(t,r,e),St=(t,r,e=1/0)=>T(t,r,e),l=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let o=[];for(let n=0;n<e;n++)o.push([]);for(let n=0;n<r;n++)for(let c=0;c<e;c++)o[c].push(t[n][c]);return o},wt=t=>l(t),Dt=t=>l(t),q=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let o=0;o<t.length;o++){let n=t[o].length,c=[];for(let s=0;s<n;s++)c.push(r);e.push(c)}return e},zt=(t,r=0)=>q(t,r),Et=(t,r=0)=>q(t,r),Nt=(t=0)=>[[t,t],[t,t]],Tt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],qt=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let o=[];for(let n=0;n<t;n++)o.push(w(r,e));return o},jt=()=>[[1,0],[0,1]],Rt=()=>[[1,0,0],[0,1,0],[0,0,1]],Bt=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let o=[];for(let n=0;n<t;n++)o.push(e===n?1:0);r.push(o)}return r},Lt=(t,r,e=1/0)=>{let o=[];for(let c=0;c<t.length;c++)o.push([]);let n=l(r);if(o.length!==n.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let c=0;c<t.length;c++){let s=t[c];for(let u=0;u<n.length;u++){let x=n[u],R=m(s,x,e);o[c].push(R)}}return o},a=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let o=[];for(let n=0;n<t.length;n++)o[n]=m(t[n],r,e);return o},dt=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!D(t[e],r[e]))return!1;return!0},L=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],At=(t,r)=>{let e=S(r);return a(L(t),e)},d=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],Ft=(t,r)=>{let e=f(r);return a(d(t),e)},A=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],Qt=(t,r)=>{let e=f(r);return a(A(t),e)},F=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],Xt=(t,r)=>{let e=f(r);return a(F(t),e)},Q=t=>[[t[0],0],[0,t[1]]],Yt=(t,r)=>a(Q(t),r),X=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],Zt=(t,r)=>a(X(t),r),Y=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},Z=t=>[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]],j=(t,r=1/0)=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=Y(t);if(e===0)return null;let o=Z(t);return B(o,e,r)};var Gt=(t,r,e=1/0)=>i(Math.random()*(r-t)+t,e),O=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),Ht=()=>Math.random()<.5,Jt=t=>{let r=O(0,t.length-1);return t[r]};var Ut=(t,r)=>(t%r+r)%r,Wt=(t,r,e,o,n)=>(n-o)*(t-r)/(e-r)+o,_t=(t,r,e,o)=>Math.max(t,e)<=Math.min(r,o),$t=t=>!isNaN(parseFloat(t))&&isFinite(t);var Pt=(t,r)=>{var o;if(t==null)return r;let e=(o=Number(t))!=null?o:r;return isNaN(e)?r:e};var rr=(t,r,e,o)=>{let n=Math.pow(1-t,2),c=(1-t)*2*t,s=t*t;return[n*r[0]+c*e[0]+s*o[0],n*r[1]+c*e[1]+s*o[1]]},er=(t,r,e,o)=>{let n=Math.pow(1-t,2),c=(1-t)*2*t,s=t*t;return[n*r[0]+c*e[0]+s*o[0],n*r[1]+c*e[1]+s*o[1],n*r[2]+c*e[2]+s*o[2]]},or=(t,r,e,o,n)=>{let c=Math.pow(1-t,3),s=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,x=t*t*t;return[c*r[0]+s*e[0]+u*o[0]+x*n[0],c*r[1]+s*e[1]+u*o[1]+x*n[1]]},nr=(t,r,e,o,n)=>{let c=Math.pow(1-t,3),s=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,x=t*t*t;return[c*r[0]+s*e[0]+u*o[0]+x*n[0],c*r[1]+s*e[1]+u*o[1]+x*n[1],c*r[2]+s*e[2]+u*o[2]+x*n[2]]};var sr=(t,r,e=1/0)=>{let o=[[t[0],t[1]],[r[0],r[1]]],n=j(o);if(n===null)return null;let c=[t[2],r[2]];return a(n,c,e)};export{Wt as convertRange,_ as degreesToRadians,_t as doRangesOverlap,sr as equationSystem2,Gt as getRandom,Ht as getRandomBoolean,O as getRandomInt,Jt as getRandomItemFromArray,y as getV2Angle,jt as identity2,Rt as identity3,Bt as identityN,$t as isNumber,Z as m2Adjugate,Y as m2Determinant,B as m2DivideScalar,j as m2Inverse,It as m2MulScalar,zt as m2Reset,L as m2Rotation,Q as m2Scale,vt as m2Sub,bt as m2Sum,wt as m2Transpose,Nt as m2x2,St as m3DivideScalar,gt as m3MulScalar,Et as m3Reset,d as m3RotationX,A as m3RotationY,F as m3RotationZ,X as m3Scale,yt as m3Sub,lt as m3Sum,Dt as m3Transpose,Tt as m3x3,T as mDivideScalar,dt as mEqual,Lt as mMul,N as mMulScalar,a as mMulVector,qt as mNxM,q as mReset,E as mSub,z as mSum,l as mTranspose,Ut as mod,W as radiansToDegrees,i as setDecimalPlaces,U as setV2Angle,Pt as stringToNumber,Mt as v2,or as v2CubicBezierCurve,it as v2DivideScalar,at as v2DotProduct,I as v2Length,nt as v2MulScalar,S as v2Normalize,rr as v2QuadraticBezierCurve,At as v2Rotate,Yt as v2Scale,xt as v2SetLength,et as v2Sub,tt as v2Sum,Vt as v3,pt as v3CrossProduct,nr as v3CubicBezierCurve,st as v3DivideScalar,mt as v3DotProduct,ut as v3Length,ct as v3MulScalar,f as v3Normalize,er as v3QuadraticBezierCurve,Ft as v3RotateX,Qt as v3RotateY,Xt as v3RotateZ,Zt as v3Scale,ot as v3Sub,rt as v3Sum,h as vDivideScalar,m as vDotProduct,D as vEqual,b as vLength,V as vMulScalar,w as vN,g as vNormalize,M as vSub,p as vSum};
//# sourceMappingURL=tc-math.esm.js.map
