/* 
Tool Cool Math Helpers
Version: 1.0.11
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var y=Math.pow;var s=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=y(10,r);return Math.round(t*e)/e};var I=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return s(e,r)},P=(t,r,e=1/0)=>{let n=w(t);return[s(Math.cos(r)*n,e),s(Math.sin(r)*n,e)]},tt=(t,r=1/0)=>{let e=t*(180/Math.PI);return s(e,r)},rt=(t,r=1/0)=>{let e=t*(Math.PI/180);return s(e,r)};var p=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]+r[o],e));return n},it=(t,r,e=1/0)=>p(t,r,e),ct=(t,r,e=1/0)=>p(t,r,e),M=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]-r[o],e));return n},st=(t,r,e=1/0)=>M(t,r,e),ut=(t,r,e=1/0)=>M(t,r,e),h=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]*r,e));return n},xt=(t,r,e=1/0)=>h(t,r,e),at=(t,r,e=1/0)=>h(t,r,e),f=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]/r,e));return n},mt=(t,r,e=1/0)=>f(t,r,e),pt=(t,r,e=1/0)=>f(t,r,e),b=(t,r=1/0)=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]*t[n];return s(Math.sqrt(e),r)},w=(t,r=1/0)=>b(t,r),Mt=(t,r=1/0)=>b(t,r),ht=(t,r,e=1/0)=>{let n=I(t);return[s(Math.cos(n)*r,e),s(Math.sin(n)*r,e)]},S=(t,r=1/0)=>{let e=b(t),n=[];for(let o=0;o<t.length;o++)n.push(e===0?0:s(t[o]/e,r));return n},D=(t,r=1/0)=>S(t,r),V=(t,r=1/0)=>S(t,r),m=(t,r,e=1/0)=>{let n=0;for(let o=0;o<t.length;o++)n+=t[o]*r[o];return s(n,e)},ft=(t,r,e=1/0)=>m(t,r,e),Vt=(t,r,e=1/0)=>m(t,r,e),lt=(t,r,e=1/0)=>[s(t[1]*r[2]-t[2]*r[1],e),s(t[2]*r[0]-t[0]*r[2],e),s(t[0]*r[1]-t[1]*r[0],e)],bt=(t=0)=>[t,t],gt=(t=0)=>[t,t,t],E=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let n=0;n<t;n++)e.push(r);return e},T=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var z=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(p(t[o],r[o],e));return n},It=(t,r,e=1/0)=>z(t,r,e),wt=(t,r,e=1/0)=>z(t,r,e),q=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(M(t[o],r[o],e));return n},St=(t,r,e=1/0)=>q(t,r,e),Dt=(t,r,e=1/0)=>q(t,r,e),N=(t,r,e=1/0)=>{let n=[];for(let o of t)n.push(h(o,r,e));return n},Et=(t,r,e=1/0)=>N(t,r,e),Tt=(t,r,e=1/0)=>N(t,r,e),g=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o of t)n.push(f(o,r,e));return n},Q=(t,r,e=1/0)=>g(t,r,e),zt=(t,r,e=1/0)=>g(t,r,e),l=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let n=[];for(let o=0;o<e;o++)n.push([]);for(let o=0;o<r;o++)for(let i=0;i<e;i++)n[i].push(t[o][i]);return n},qt=t=>l(t),Nt=t=>l(t),d=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++){let o=t[n].length,i=[];for(let c=0;c<o;c++)i.push(r);e.push(i)}return e},dt=(t,r=0)=>d(t,r),jt=(t,r=0)=>d(t,r),At=(t=0)=>[[t,t],[t,t]],Rt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Bt=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let n=[];for(let o=0;o<t;o++)n.push(E(r,e));return n},Lt=()=>[[1,0],[0,1]],Ft=()=>[[1,0,0],[0,1,0],[0,0,1]],Qt=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let n=[];for(let o=0;o<t;o++)n.push(e===o?1:0);r.push(n)}return r},Xt=(t,r,e=1/0)=>{let n=[];for(let i=0;i<t.length;i++)n.push([]);let o=l(r);if(n.length!==o.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let i=0;i<t.length;i++){let c=t[i];for(let u=0;u<o.length;u++){let x=o[u],F=m(c,x,e);n[i].push(F)}}return n},a=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let n=[];for(let o=0;o<t.length;o++)n[o]=m(t[o],r,e);return n},Yt=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!T(t[e],r[e]))return!1;return!0},X=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],Zt=(t,r)=>{let e=D(r);return a(X(t),e)},Y=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],Ht=(t,r)=>{let e=V(r);return a(Y(t),e)},Z=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],Ot=(t,r)=>{let e=V(r);return a(Z(t),e)},H=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],kt=(t,r)=>{let e=V(r);return a(H(t),e)},O=t=>[[t[0],0],[0,t[1]]],Gt=(t,r)=>a(O(t),r),k=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],Jt=(t,r)=>a(k(t),r),G=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=[];for(let i=0;i<n;i++){if(i===r)continue;let c=[];for(let u=0;u<n;u++)u!==e&&c.push(t[i][u]);o.push(c)}return o},j=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=G(t,r,e);return v(o)},v=t=>{let r=t.length;if(r===0)return 1;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t[0][0];if(r===2)return A(t);let e=0;for(let n=0;n<r;n++){let o=j(t,0,n),i=t[0][n];n%2!==0&&(i=-i),e+=o*i}return e},A=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},Kt=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return v(t)},R=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]]},Ut=t=>B(t),B=t=>{let r=t.length;if(r<=0)return null;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t;if(r===2)return R(t);let e=[];for(let n=0;n<r;n++){let o=[];for(let i=0;i<r;i++){let c=j(t,n,i),u=Math.pow(-1,n+i);o.push(u*c)}e.push(o)}return l(e)},L=(t,r=1/0)=>{if(t.length<=0)return null;if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=A(t);if(e===0)return null;let n=R(t);return n===null?null:Q(n,e,r)},Wt=(t,r=1/0)=>J(t,r),J=(t,r=1/0)=>{let e=t.length;if(e<=0)return null;if(e!==t[0].length)throw new Error("The matrix must be square.");let n=v(t),o=B(t);return o===null?null:g(o,n,r)};var Ct=(t,r,e=1/0)=>s(Math.random()*(r-t)+t,e),K=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),Pt=()=>Math.random()<.5,tr=t=>{let r=K(0,t.length-1);return t[r]};var er=(t,r)=>(t%r+r)%r,nr=(t,r,e,n,o)=>(o-n)*(t-r)/(e-r)+n,or=(t,r,e,n)=>Math.max(t,e)<=Math.min(r,n),ir=t=>!isNaN(parseFloat(t))&&isFinite(t);var sr=(t,r)=>{var n;if(t==null)return r;let e=(n=Number(t))!=null?n:r;return isNaN(e)?r:e};var xr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1]]},ar=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1],o*r[2]+i*e[2]+c*n[2]]},mr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,x=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+x*o[0],i*r[1]+c*e[1]+u*n[1]+x*o[1]]},pr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,x=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+x*o[0],i*r[1]+c*e[1]+u*n[1]+x*o[1],i*r[2]+c*e[2]+u*n[2]+x*o[2]]};var fr=(t,r,e=1/0)=>{let n=[[t[0],t[1]],[r[0],r[1]]],o=L(n);if(o===null)return null;let i=[t[2],r[2]];return a(o,i,e)};export{nr as convertRange,rt as degreesToRadians,or as doRangesOverlap,fr as equationSystem2,Ct as getRandom,Pt as getRandomBoolean,K as getRandomInt,tr as getRandomItemFromArray,I as getV2Angle,Lt as identity2,Ft as identity3,Qt as identityN,ir as isNumber,R as m2Adjugate,A as m2Determinant,Q as m2DivideScalar,L as m2Inverse,Et as m2MulScalar,dt as m2Reset,X as m2Rotation,O as m2Scale,St as m2Sub,It as m2Sum,qt as m2Transpose,At as m2x2,Ut as m3Adjugate,Kt as m3Determinant,zt as m3DivideScalar,Wt as m3Inverse,Tt as m3MulScalar,jt as m3Reset,Y as m3RotationX,Z as m3RotationY,H as m3RotationZ,k as m3Scale,Dt as m3Sub,wt as m3Sum,Nt as m3Transpose,Rt as m3x3,B as mAdjugate,v as mDeterminant,g as mDivideScalar,Yt as mEqual,J as mInverse,j as mMinor,Xt as mMul,N as mMulScalar,a as mMulVector,Bt as mNxM,d as mReset,q as mSub,z as mSum,l as mTranspose,er as mod,tt as radiansToDegrees,s as setDecimalPlaces,P as setV2Angle,sr as stringToNumber,bt as v2,mr as v2CubicBezierCurve,mt as v2DivideScalar,ft as v2DotProduct,w as v2Length,xt as v2MulScalar,D as v2Normalize,xr as v2QuadraticBezierCurve,Zt as v2Rotate,Gt as v2Scale,ht as v2SetLength,st as v2Sub,it as v2Sum,gt as v3,lt as v3CrossProduct,pr as v3CubicBezierCurve,pt as v3DivideScalar,Vt as v3DotProduct,Mt as v3Length,at as v3MulScalar,V as v3Normalize,ar as v3QuadraticBezierCurve,Ht as v3RotateX,Ot as v3RotateY,kt as v3RotateZ,Jt as v3Scale,ut as v3Sub,ct as v3Sum,f as vDivideScalar,m as vDotProduct,T as vEqual,b as vLength,h as vMulScalar,E as vN,S as vNormalize,M as vSub,p as vSum};
//# sourceMappingURL=tc-math.esm.js.map
