/* 
Tool Cool Math Helpers
Version: 1.0.13
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var w=Math.pow;var u=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=w(10,r);return Math.round(t*e)/e};var S=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return u(e,r)},nt=(t,r,e=1/0)=>{let n=D(t);return[u(Math.cos(r)*n,e),u(Math.sin(r)*n,e)]},ot=(t,r=1/0)=>{let e=t*(180/Math.PI);return u(e,r)},it=(t,r=1/0)=>{let e=t*(Math.PI/180);return u(e,r)};var m=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(u(t[o]+r[o],e));return n},xt=(t,r,e=1/0)=>m(t,r,e),at=(t,r,e=1/0)=>m(t,r,e),h=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(u(t[o]-r[o],e));return n},pt=(t,r,e=1/0)=>h(t,r,e),Mt=(t,r,e=1/0)=>h(t,r,e),f=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(u(t[o]*r,e));return n},mt=(t,r,e=1/0)=>f(t,r,e),ht=(t,r,e=1/0)=>f(t,r,e),l=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o=0;o<t.length;o++)n.push(u(t[o]/r,e));return n},ft=(t,r,e=1/0)=>l(t,r,e),lt=(t,r,e=1/0)=>l(t,r,e),g=(t,r=1/0)=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]*t[n];return u(Math.sqrt(e),r)},D=(t,r=1/0)=>g(t,r),Vt=(t,r=1/0)=>g(t,r),bt=(t,r,e=1/0)=>{let n=S(t);return[u(Math.cos(n)*r,e),u(Math.sin(n)*r,e)]},d=(t,r=1/0)=>{let e=g(t),n=[];for(let o=0;o<t.length;o++)n.push(e===0?0:u(t[o]/e,r));return n},E=(t,r=1/0)=>d(t,r),V=(t,r=1/0)=>d(t,r),M=(t,r,e=1/0)=>{let n=0;for(let o=0;o<t.length;o++)n+=t[o]*r[o];return u(n,e)},gt=(t,r,e=1/0)=>M(t,r,e),yt=(t,r,e=1/0)=>M(t,r,e),vt=(t,r,e=1/0)=>[u(t[1]*r[2]-t[2]*r[1],e),u(t[2]*r[0]-t[0]*r[2],e),u(t[0]*r[1]-t[1]*r[0],e)],It=(t=0)=>[t,t],wt=(t=0)=>[t,t,t],T=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let n=0;n<t;n++)e.push(r);return e},z=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var R=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(m(t[o],r[o],e));return n},dt=(t,r,e=1/0)=>R(t,r,e),Et=(t,r,e=1/0)=>R(t,r,e),j=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(h(t[o],r[o],e));return n},Tt=(t,r,e=1/0)=>j(t,r,e),zt=(t,r,e=1/0)=>j(t,r,e),N=(t,r,e=1/0)=>{let n=[];for(let o of t)n.push(f(o,r,e));return n},Rt=(t,r,e=1/0)=>N(t,r,e),jt=(t,r,e=1/0)=>N(t,r,e),y=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o of t)n.push(l(o,r,e));return n},O=(t,r,e=1/0)=>y(t,r,e),Nt=(t,r,e=1/0)=>y(t,r,e),b=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let n=[];for(let o=0;o<e;o++)n.push([]);for(let o=0;o<r;o++)for(let i=0;i<e;i++)n[i].push(t[o][i]);return n},At=t=>b(t),qt=t=>b(t),A=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++){let o=t[n].length,i=[];for(let c=0;c<o;c++)i.push(r);e.push(i)}return e},Lt=(t,r=0)=>A(t,r),Bt=(t,r=0)=>A(t,r),Ft=(t=0)=>[[t,t],[t,t]],Qt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Xt=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let n=[];for(let o=0;o<t;o++)n.push(T(r,e));return n},Yt=()=>[[1,0],[0,1]],Zt=()=>[[1,0,0],[0,1,0],[0,0,1]],Ht=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let n=[];for(let o=0;o<t;o++)n.push(e===o?1:0);r.push(n)}return r},a=t=>{let r=[];for(let e=0;e<t.length;e++){let n=t[e],o=[];for(let i=0;i<n.length;i++)o.push(n[i]);r.push(o)}return r},q=t=>a(t),L=t=>a(t),Ot=(t,r)=>{if(t.length<=0)return[];let e=a(t);for(let n=0;n<e.length;n++)e[n].push(r[n]);return e},kt=(t,r)=>{if(t.length<=0)return[];let e=a(t);for(let n=0;n<e.length;n++)e[n].unshift(r[n]);return e},Gt=(t,r)=>{let e=a(t);return e.push(r),e},Jt=(t,r)=>{let e=q(t);return e.push(r),e},Kt=(t,r)=>{let e=L(t);return e.push(r),e},Ut=(t,r)=>{let e=a(t);return e.unshift(r),e},Wt=(t,r)=>{let e=q(t);return e.unshift(r),e},_t=(t,r)=>{let e=L(t);return e.unshift(r),e},$t=t=>{if(t.length<=0)return[];let r=a(t);return r.pop(),r},Ct=t=>{if(t.length<=0)return[];let r=a(t);return r.shift(),r},Pt=t=>{if(t.length<=0)return[];let r=a(t);for(let e=0;e<r.length;e++)r[e].pop();return r},tr=t=>{if(t.length<=0)return[];let r=a(t);for(let e=0;e<r.length;e++)r[e].shift();return r},rr=(t,r,e=1/0)=>{let n=[];for(let i=0;i<t.length;i++)n.push([]);let o=b(r);if(n.length!==o.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let i=0;i<t.length;i++){let c=t[i];for(let s=0;s<o.length;s++){let x=o[s],H=M(c,x,e);n[i].push(H)}}return n},p=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let n=[];for(let o=0;o<t.length;o++)n[o]=M(t[o],r,e);return n},er=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!z(t[e],r[e]))return!1;return!0},k=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],nr=(t,r)=>{let e=E(r);return p(k(t),e)},G=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],or=(t,r)=>{let e=V(r);return p(G(t),e)},J=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],ir=(t,r)=>{let e=V(r);return p(J(t),e)},K=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],cr=(t,r)=>{let e=V(r);return p(K(t),e)},U=t=>[[t[0],0],[0,t[1]]],sr=(t,r)=>p(U(t),r),W=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],ur=(t,r)=>p(W(t),r),_=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=[];for(let i=0;i<n;i++){if(i===r)continue;let c=[];for(let s=0;s<n;s++)s!==e&&c.push(t[i][s]);o.push(c)}return o},B=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=_(t,r,e);return v(o)},v=t=>{let r=t.length;if(r===0)return 1;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t[0][0];if(r===2)return F(t);let e=0;for(let n=0;n<r;n++){let o=B(t,0,n),i=t[0][n];n%2!==0&&(i=-i),e+=o*i}return e},F=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},xr=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return v(t)},Q=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]]},ar=t=>X(t),X=t=>{let r=t.length;if(r<=0)return null;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t;if(r===2)return Q(t);let e=[];for(let n=0;n<r;n++){let o=[];for(let i=0;i<r;i++){let c=B(t,n,i),s=Math.pow(-1,n+i);o.push(s*c)}e.push(o)}return b(e)},Y=(t,r=1/0)=>{if(t.length<=0)return null;if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=F(t);if(e===0)return null;let n=Q(t);return n===null?null:O(n,e,r)},Z=(t,r=1/0)=>I(t,r),I=(t,r=1/0)=>{let e=t.length;if(e<=0)return null;if(e!==t[0].length)throw new Error("The matrix must be square.");let n=v(t),o=X(t);return o===null?null:y(o,n,r)};var mr=(t,r,e=1/0)=>u(Math.random()*(r-t)+t,e),$=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),hr=()=>Math.random()<.5,fr=t=>{let r=$(0,t.length-1);return t[r]};var Vr=(t,r)=>(t%r+r)%r,br=(t,r,e,n,o)=>(o-n)*(t-r)/(e-r)+n,gr=(t,r,e,n)=>Math.max(t,e)<=Math.min(r,n),yr=t=>!isNaN(parseFloat(t))&&isFinite(t);var Ir=(t,r)=>{var n;if(t==null)return r;let e=(n=Number(t))!=null?n:r;return isNaN(e)?r:e};var Sr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1]]},Dr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1],o*r[2]+i*e[2]+c*n[2]]},dr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,s=(1-t)*3*t*t,x=t*t*t;return[i*r[0]+c*e[0]+s*n[0]+x*o[0],i*r[1]+c*e[1]+s*n[1]+x*o[1]]},Er=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,s=(1-t)*3*t*t,x=t*t*t;return[i*r[0]+c*e[0]+s*n[0]+x*o[0],i*r[1]+c*e[1]+s*n[1]+x*o[1],i*r[2]+c*e[2]+s*n[2]+x*o[2]]};var Rr=(t,r,e=1/0)=>{let n=[[t[0],t[1]],[r[0],r[1]]],o=Y(n);if(o===null)return null;let i=[t[2],r[2]];return p(o,i,e)},jr=(t,r,e,n=1/0)=>{let o=[[t[0],t[1],t[2]],[r[0],r[1],r[2]],[e[0],e[1],e[2]]],i=Z(o);if(i===null)return null;let c=[t[3],r[3],e[3]];return p(i,c,n)},Nr=(t,r=1/0)=>{if(t.length<=0)return null;let e=[],n=t.length;for(let c=0;c<n;c++){let s=[];for(let x=0;x<n;x++)s.push(t[c][x]);e.push(s)}let o=I(e);if(o===null)return null;let i=[];for(let c=0;c<n;c++){let s=t[c];i.push(s[s.length-1])}return p(o,i,r)};export{br as convertRange,it as degreesToRadians,gr as doRangesOverlap,Rr as equationSystem2,jr as equationSystem3,Nr as equationSystemN,mr as getRandom,hr as getRandomBoolean,$ as getRandomInt,fr as getRandomItemFromArray,S as getV2Angle,Yt as identity2,Zt as identity3,Ht as identityN,yr as isNumber,Q as m2Adjugate,Jt as m2AppendRow,q as m2DeepCopy,F as m2Determinant,O as m2DivideScalar,Y as m2Inverse,Rt as m2MulScalar,Wt as m2PrependRow,Lt as m2Reset,k as m2Rotation,U as m2Scale,Tt as m2Sub,dt as m2Sum,At as m2Transpose,Ft as m2x2,ar as m3Adjugate,Kt as m3AppendRow,L as m3DeepCopy,xr as m3Determinant,Nt as m3DivideScalar,Z as m3Inverse,jt as m3MulScalar,_t as m3PrependRow,Bt as m3Reset,G as m3RotationX,J as m3RotationY,K as m3RotationZ,W as m3Scale,zt as m3Sub,Et as m3Sum,qt as m3Transpose,Qt as m3x3,X as mAdjugate,Ot as mAppendCol,Gt as mAppendRow,a as mDeepCopy,tr as mDelFirstColumn,Ct as mDelFirstRow,Pt as mDelLastColumn,$t as mDelLastRow,v as mDeterminant,y as mDivideScalar,er as mEqual,I as mInverse,B as mMinor,rr as mMul,N as mMulScalar,p as mMulVector,Xt as mNxM,kt as mPrependCol,Ut as mPrependRow,A as mReset,j as mSub,R as mSum,b as mTranspose,Vr as mod,ot as radiansToDegrees,u as setDecimalPlaces,nt as setV2Angle,Ir as stringToNumber,It as v2,dr as v2CubicBezierCurve,ft as v2DivideScalar,gt as v2DotProduct,D as v2Length,mt as v2MulScalar,E as v2Normalize,Sr as v2QuadraticBezierCurve,nr as v2Rotate,sr as v2Scale,bt as v2SetLength,pt as v2Sub,xt as v2Sum,wt as v3,vt as v3CrossProduct,Er as v3CubicBezierCurve,lt as v3DivideScalar,yt as v3DotProduct,Vt as v3Length,ht as v3MulScalar,V as v3Normalize,Dr as v3QuadraticBezierCurve,or as v3RotateX,ir as v3RotateY,cr as v3RotateZ,ur as v3Scale,Mt as v3Sub,at as v3Sum,l as vDivideScalar,M as vDotProduct,z as vEqual,g as vLength,f as vMulScalar,T as vN,d as vNormalize,h as vSub,m as vSum};
//# sourceMappingURL=tc-math.esm.js.map
