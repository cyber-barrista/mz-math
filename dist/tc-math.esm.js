/* 
Tool Cool Math Helpers
Version: 1.0.13
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var w=Math.pow;var u=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=w(10,r);return Math.round(t*e)/e};var S=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return u(e,r)},nt=(t,r,e=1/0)=>{let n=D(t);return[u(Math.cos(r)*n,e),u(Math.sin(r)*n,e)]},ot=(t,r=1/0)=>{let e=t*(180/Math.PI);return u(e,r)},it=(t,r=1/0)=>{let e=t*(Math.PI/180);return u(e,r)};var m=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(u(t[o]+r[o],e));return n},xt=(t,r,e=1/0)=>m(t,r,e),at=(t,r,e=1/0)=>m(t,r,e),M=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(u(t[o]-r[o],e));return n},pt=(t,r,e=1/0)=>M(t,r,e),mt=(t,r,e=1/0)=>M(t,r,e),h=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(u(t[o]*r,e));return n},Mt=(t,r,e=1/0)=>h(t,r,e),ht=(t,r,e=1/0)=>h(t,r,e),f=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o=0;o<t.length;o++)n.push(u(t[o]/r,e));return n},ft=(t,r,e=1/0)=>f(t,r,e),Vt=(t,r,e=1/0)=>f(t,r,e),b=(t,r=1/0)=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]*t[n];return u(Math.sqrt(e),r)},D=(t,r=1/0)=>b(t,r),lt=(t,r=1/0)=>b(t,r),bt=(t,r,e=1/0)=>{let n=S(t);return[u(Math.cos(n)*r,e),u(Math.sin(n)*r,e)]},E=(t,r=1/0)=>{let e=b(t),n=[];for(let o=0;o<t.length;o++)n.push(e===0?0:u(t[o]/e,r));return n},T=(t,r=1/0)=>E(t,r),V=(t,r=1/0)=>E(t,r),p=(t,r,e=1/0)=>{let n=0;for(let o=0;o<t.length;o++)n+=t[o]*r[o];return u(n,e)},gt=(t,r,e=1/0)=>p(t,r,e),yt=(t,r,e=1/0)=>p(t,r,e),vt=(t,r,e=1/0)=>[u(t[1]*r[2]-t[2]*r[1],e),u(t[2]*r[0]-t[0]*r[2],e),u(t[0]*r[1]-t[1]*r[0],e)],It=(t=0)=>[t,t],wt=(t=0)=>[t,t,t],z=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let n=0;n<t;n++)e.push(r);return e},d=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var j=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(m(t[o],r[o],e));return n},Et=(t,r,e=1/0)=>j(t,r,e),Tt=(t,r,e=1/0)=>j(t,r,e),N=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(M(t[o],r[o],e));return n},zt=(t,r,e=1/0)=>N(t,r,e),dt=(t,r,e=1/0)=>N(t,r,e),R=(t,r,e=1/0)=>{let n=[];for(let o of t)n.push(h(o,r,e));return n},jt=(t,r,e=1/0)=>R(t,r,e),Nt=(t,r,e=1/0)=>R(t,r,e),g=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o of t)n.push(f(o,r,e));return n},Z=(t,r,e=1/0)=>g(t,r,e),Rt=(t,r,e=1/0)=>g(t,r,e),l=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let n=[];for(let o=0;o<e;o++)n.push([]);for(let o=0;o<r;o++)for(let i=0;i<e;i++)n[i].push(t[o][i]);return n},At=t=>l(t),qt=t=>l(t),A=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++){let o=t[n].length,i=[];for(let c=0;c<o;c++)i.push(r);e.push(i)}return e},Bt=(t,r=0)=>A(t,r),Lt=(t,r=0)=>A(t,r),Ft=(t=0)=>[[t,t],[t,t]],Qt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Xt=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let n=[];for(let o=0;o<t;o++)n.push(z(r,e));return n},Yt=()=>[[1,0],[0,1]],Zt=()=>[[1,0,0],[0,1,0],[0,0,1]],Ht=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let n=[];for(let o=0;o<t;o++)n.push(e===o?1:0);r.push(n)}return r},y=t=>{let r=[];for(let e=0;e<t.length;e++){let n=t[e],o=[];for(let i=0;i<n.length;i++)o.push(n[i]);r.push(o)}return r},H=t=>y(t),O=t=>y(t),Ot=(t,r)=>{let e=y(t);return e.push(r),e},kt=(t,r)=>{let e=H(t);return e.push(r),e},Gt=(t,r)=>{let e=O(t);return e.push(r),e},Jt=(t,r,e=1/0)=>{let n=[];for(let i=0;i<t.length;i++)n.push([]);let o=l(r);if(n.length!==o.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let i=0;i<t.length;i++){let c=t[i];for(let s=0;s<o.length;s++){let x=o[s],Y=p(c,x,e);n[i].push(Y)}}return n},a=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let n=[];for(let o=0;o<t.length;o++)n[o]=p(t[o],r,e);return n},Kt=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!d(t[e],r[e]))return!1;return!0},k=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],Ut=(t,r)=>{let e=T(r);return a(k(t),e)},G=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],Wt=(t,r)=>{let e=V(r);return a(G(t),e)},J=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],_t=(t,r)=>{let e=V(r);return a(J(t),e)},K=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],$t=(t,r)=>{let e=V(r);return a(K(t),e)},U=t=>[[t[0],0],[0,t[1]]],Ct=(t,r)=>a(U(t),r),W=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],Pt=(t,r)=>a(W(t),r),_=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=[];for(let i=0;i<n;i++){if(i===r)continue;let c=[];for(let s=0;s<n;s++)s!==e&&c.push(t[i][s]);o.push(c)}return o},q=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=_(t,r,e);return v(o)},v=t=>{let r=t.length;if(r===0)return 1;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t[0][0];if(r===2)return B(t);let e=0;for(let n=0;n<r;n++){let o=q(t,0,n),i=t[0][n];n%2!==0&&(i=-i),e+=o*i}return e},B=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},tr=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return v(t)},L=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]]},rr=t=>F(t),F=t=>{let r=t.length;if(r<=0)return null;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t;if(r===2)return L(t);let e=[];for(let n=0;n<r;n++){let o=[];for(let i=0;i<r;i++){let c=q(t,n,i),s=Math.pow(-1,n+i);o.push(s*c)}e.push(o)}return l(e)},Q=(t,r=1/0)=>{if(t.length<=0)return null;if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=B(t);if(e===0)return null;let n=L(t);return n===null?null:Z(n,e,r)},X=(t,r=1/0)=>I(t,r),I=(t,r=1/0)=>{let e=t.length;if(e<=0)return null;if(e!==t[0].length)throw new Error("The matrix must be square.");let n=v(t),o=F(t);return o===null?null:g(o,n,r)};var or=(t,r,e=1/0)=>u(Math.random()*(r-t)+t,e),$=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),ir=()=>Math.random()<.5,cr=t=>{let r=$(0,t.length-1);return t[r]};var ur=(t,r)=>(t%r+r)%r,xr=(t,r,e,n,o)=>(o-n)*(t-r)/(e-r)+n,ar=(t,r,e,n)=>Math.max(t,e)<=Math.min(r,n),pr=t=>!isNaN(parseFloat(t))&&isFinite(t);var Mr=(t,r)=>{var n;if(t==null)return r;let e=(n=Number(t))!=null?n:r;return isNaN(e)?r:e};var fr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1]]},Vr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1],o*r[2]+i*e[2]+c*n[2]]},lr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,s=(1-t)*3*t*t,x=t*t*t;return[i*r[0]+c*e[0]+s*n[0]+x*o[0],i*r[1]+c*e[1]+s*n[1]+x*o[1]]},br=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,s=(1-t)*3*t*t,x=t*t*t;return[i*r[0]+c*e[0]+s*n[0]+x*o[0],i*r[1]+c*e[1]+s*n[1]+x*o[1],i*r[2]+c*e[2]+s*n[2]+x*o[2]]};var vr=(t,r,e=1/0)=>{let n=[[t[0],t[1]],[r[0],r[1]]],o=Q(n);if(o===null)return null;let i=[t[2],r[2]];return a(o,i,e)},Ir=(t,r,e,n=1/0)=>{let o=[[t[0],t[1],t[2]],[r[0],r[1],r[2]],[e[0],e[1],e[2]]],i=X(o);if(i===null)return null;let c=[t[3],r[3],e[3]];return a(i,c,n)},wr=(t,r=1/0)=>{if(t.length<=0)return null;let e=[],n=t.length;for(let c=0;c<n;c++){let s=[];for(let x=0;x<n;x++)s.push(t[c][x]);e.push(s)}let o=I(e);if(o===null)return null;let i=[];for(let c=0;c<n;c++){let s=t[c];i.push(s[s.length-1])}return a(o,i,r)};export{xr as convertRange,it as degreesToRadians,ar as doRangesOverlap,vr as equationSystem2,Ir as equationSystem3,wr as equationSystemN,or as getRandom,ir as getRandomBoolean,$ as getRandomInt,cr as getRandomItemFromArray,S as getV2Angle,Yt as identity2,Zt as identity3,Ht as identityN,pr as isNumber,L as m2Adjugate,kt as m2AppendRow,H as m2DeepCopy,B as m2Determinant,Z as m2DivideScalar,Q as m2Inverse,jt as m2MulScalar,Bt as m2Reset,k as m2Rotation,U as m2Scale,zt as m2Sub,Et as m2Sum,At as m2Transpose,Ft as m2x2,rr as m3Adjugate,Gt as m3AppendRow,O as m3DeepCopy,tr as m3Determinant,Rt as m3DivideScalar,X as m3Inverse,Nt as m3MulScalar,Lt as m3Reset,G as m3RotationX,J as m3RotationY,K as m3RotationZ,W as m3Scale,dt as m3Sub,Tt as m3Sum,qt as m3Transpose,Qt as m3x3,F as mAdjugate,Ot as mAppendRow,y as mDeepCopy,v as mDeterminant,g as mDivideScalar,Kt as mEqual,I as mInverse,q as mMinor,Jt as mMul,R as mMulScalar,a as mMulVector,Xt as mNxM,A as mReset,N as mSub,j as mSum,l as mTranspose,ur as mod,ot as radiansToDegrees,u as setDecimalPlaces,nt as setV2Angle,Mr as stringToNumber,It as v2,lr as v2CubicBezierCurve,ft as v2DivideScalar,gt as v2DotProduct,D as v2Length,Mt as v2MulScalar,T as v2Normalize,fr as v2QuadraticBezierCurve,Ut as v2Rotate,Ct as v2Scale,bt as v2SetLength,pt as v2Sub,xt as v2Sum,wt as v3,vt as v3CrossProduct,br as v3CubicBezierCurve,Vt as v3DivideScalar,yt as v3DotProduct,lt as v3Length,ht as v3MulScalar,V as v3Normalize,Vr as v3QuadraticBezierCurve,Wt as v3RotateX,_t as v3RotateY,$t as v3RotateZ,Pt as v3Scale,mt as v3Sub,at as v3Sum,f as vDivideScalar,p as vDotProduct,d as vEqual,b as vLength,h as vMulScalar,z as vN,E as vNormalize,M as vSub,m as vSum};
//# sourceMappingURL=tc-math.esm.js.map
