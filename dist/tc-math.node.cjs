/* 
Tool Cool Math Helpers
Version: 1.0.11
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var I=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var $=Object.prototype.hasOwnProperty;var X=Math.pow;var C=(t,r)=>{for(var e in r)I(t,e,{get:r[e],enumerable:!0})},P=(t,r,e,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of _(r))!$.call(t,o)&&o!==e&&I(t,o,{get:()=>r[o],enumerable:!(n=W(r,o))||n.enumerable});return t};var tt=t=>P(I({},"__esModule",{value:!0}),t);var ur={};C(ur,{convertRange:()=>$t,degreesToRadians:()=>nt,doRangesOverlap:()=>Ct,equationSystem2:()=>ir,equationSystem3:()=>cr,equationSystemN:()=>sr,getRandom:()=>Kt,getRandomBoolean:()=>Ut,getRandomInt:()=>K,getRandomItemFromArray:()=>Wt,getV2Angle:()=>w,identity2:()=>qt,identity3:()=>At,identityN:()=>Bt,isNumber:()=>Pt,m2Adjugate:()=>B,m2Determinant:()=>A,m2DivideScalar:()=>Y,m2Inverse:()=>F,m2MulScalar:()=>wt,m2Reset:()=>zt,m2Rotation:()=>Z,m2Scale:()=>G,m2Sub:()=>yt,m2Sum:()=>gt,m2Transpose:()=>Et,m2x2:()=>Nt,m3Adjugate:()=>Jt,m3Determinant:()=>Gt,m3DivideScalar:()=>Dt,m3Inverse:()=>Q,m3MulScalar:()=>St,m3Reset:()=>dt,m3RotationX:()=>H,m3RotationY:()=>O,m3RotationZ:()=>k,m3Scale:()=>J,m3Sub:()=>It,m3Sum:()=>vt,m3Transpose:()=>Tt,m3x3:()=>jt,mAdjugate:()=>L,mDeterminant:()=>v,mDivideScalar:()=>g,mEqual:()=>Ft,mInverse:()=>y,mMinor:()=>q,mMul:()=>Lt,mMulScalar:()=>j,mMulVector:()=>x,mNxM:()=>Rt,mReset:()=>R,mSub:()=>N,mSum:()=>d,mTranspose:()=>l,mod:()=>_t,radiansToDegrees:()=>et,setDecimalPlaces:()=>s,setV2Angle:()=>rt,stringToNumber:()=>tr,v2:()=>lt,v2CubicBezierCurve:()=>nr,v2DivideScalar:()=>at,v2DotProduct:()=>Mt,v2Length:()=>S,v2MulScalar:()=>ut,v2Normalize:()=>E,v2QuadraticBezierCurve:()=>rr,v2Rotate:()=>Qt,v2Scale:()=>Ht,v2SetLength:()=>ht,v2Sub:()=>ct,v2Sum:()=>ot,v3:()=>bt,v3CrossProduct:()=>Vt,v3CubicBezierCurve:()=>or,v3DivideScalar:()=>mt,v3DotProduct:()=>ft,v3Length:()=>pt,v3MulScalar:()=>xt,v3Normalize:()=>V,v3QuadraticBezierCurve:()=>er,v3RotateX:()=>Xt,v3RotateY:()=>Yt,v3RotateZ:()=>Zt,v3Scale:()=>Ot,v3Sub:()=>st,v3Sum:()=>it,vDivideScalar:()=>f,vDotProduct:()=>m,vEqual:()=>z,vLength:()=>b,vMulScalar:()=>M,vN:()=>T,vNormalize:()=>D,vSub:()=>h,vSum:()=>p});module.exports=tt(ur);var s=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=X(10,r);return Math.round(t*e)/e};var w=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return s(e,r)},rt=(t,r,e=1/0)=>{let n=S(t);return[s(Math.cos(r)*n,e),s(Math.sin(r)*n,e)]},et=(t,r=1/0)=>{let e=t*(180/Math.PI);return s(e,r)},nt=(t,r=1/0)=>{let e=t*(Math.PI/180);return s(e,r)};var p=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]+r[o],e));return n},ot=(t,r,e=1/0)=>p(t,r,e),it=(t,r,e=1/0)=>p(t,r,e),h=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]-r[o],e));return n},ct=(t,r,e=1/0)=>h(t,r,e),st=(t,r,e=1/0)=>h(t,r,e),M=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]*r,e));return n},ut=(t,r,e=1/0)=>M(t,r,e),xt=(t,r,e=1/0)=>M(t,r,e),f=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]/r,e));return n},at=(t,r,e=1/0)=>f(t,r,e),mt=(t,r,e=1/0)=>f(t,r,e),b=(t,r=1/0)=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]*t[n];return s(Math.sqrt(e),r)},S=(t,r=1/0)=>b(t,r),pt=(t,r=1/0)=>b(t,r),ht=(t,r,e=1/0)=>{let n=w(t);return[s(Math.cos(n)*r,e),s(Math.sin(n)*r,e)]},D=(t,r=1/0)=>{let e=b(t),n=[];for(let o=0;o<t.length;o++)n.push(e===0?0:s(t[o]/e,r));return n},E=(t,r=1/0)=>D(t,r),V=(t,r=1/0)=>D(t,r),m=(t,r,e=1/0)=>{let n=0;for(let o=0;o<t.length;o++)n+=t[o]*r[o];return s(n,e)},Mt=(t,r,e=1/0)=>m(t,r,e),ft=(t,r,e=1/0)=>m(t,r,e),Vt=(t,r,e=1/0)=>[s(t[1]*r[2]-t[2]*r[1],e),s(t[2]*r[0]-t[0]*r[2],e),s(t[0]*r[1]-t[1]*r[0],e)],lt=(t=0)=>[t,t],bt=(t=0)=>[t,t,t],T=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let n=0;n<t;n++)e.push(r);return e},z=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var d=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(p(t[o],r[o],e));return n},gt=(t,r,e=1/0)=>d(t,r,e),vt=(t,r,e=1/0)=>d(t,r,e),N=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(h(t[o],r[o],e));return n},yt=(t,r,e=1/0)=>N(t,r,e),It=(t,r,e=1/0)=>N(t,r,e),j=(t,r,e=1/0)=>{let n=[];for(let o of t)n.push(M(o,r,e));return n},wt=(t,r,e=1/0)=>j(t,r,e),St=(t,r,e=1/0)=>j(t,r,e),g=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o of t)n.push(f(o,r,e));return n},Y=(t,r,e=1/0)=>g(t,r,e),Dt=(t,r,e=1/0)=>g(t,r,e),l=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let n=[];for(let o=0;o<e;o++)n.push([]);for(let o=0;o<r;o++)for(let i=0;i<e;i++)n[i].push(t[o][i]);return n},Et=t=>l(t),Tt=t=>l(t),R=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++){let o=t[n].length,i=[];for(let c=0;c<o;c++)i.push(r);e.push(i)}return e},zt=(t,r=0)=>R(t,r),dt=(t,r=0)=>R(t,r),Nt=(t=0)=>[[t,t],[t,t]],jt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Rt=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let n=[];for(let o=0;o<t;o++)n.push(T(r,e));return n},qt=()=>[[1,0],[0,1]],At=()=>[[1,0,0],[0,1,0],[0,0,1]],Bt=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let n=[];for(let o=0;o<t;o++)n.push(e===o?1:0);r.push(n)}return r},Lt=(t,r,e=1/0)=>{let n=[];for(let i=0;i<t.length;i++)n.push([]);let o=l(r);if(n.length!==o.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let i=0;i<t.length;i++){let c=t[i];for(let u=0;u<o.length;u++){let a=o[u],U=m(c,a,e);n[i].push(U)}}return n},x=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let n=[];for(let o=0;o<t.length;o++)n[o]=m(t[o],r,e);return n},Ft=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!z(t[e],r[e]))return!1;return!0},Z=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],Qt=(t,r)=>{let e=E(r);return x(Z(t),e)},H=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],Xt=(t,r)=>{let e=V(r);return x(H(t),e)},O=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],Yt=(t,r)=>{let e=V(r);return x(O(t),e)},k=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],Zt=(t,r)=>{let e=V(r);return x(k(t),e)},G=t=>[[t[0],0],[0,t[1]]],Ht=(t,r)=>x(G(t),r),J=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],Ot=(t,r)=>x(J(t),r),kt=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=[];for(let i=0;i<n;i++){if(i===r)continue;let c=[];for(let u=0;u<n;u++)u!==e&&c.push(t[i][u]);o.push(c)}return o},q=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=kt(t,r,e);return v(o)},v=t=>{let r=t.length;if(r===0)return 1;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t[0][0];if(r===2)return A(t);let e=0;for(let n=0;n<r;n++){let o=q(t,0,n),i=t[0][n];n%2!==0&&(i=-i),e+=o*i}return e},A=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},Gt=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return v(t)},B=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]]},Jt=t=>L(t),L=t=>{let r=t.length;if(r<=0)return null;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t;if(r===2)return B(t);let e=[];for(let n=0;n<r;n++){let o=[];for(let i=0;i<r;i++){let c=q(t,n,i),u=Math.pow(-1,n+i);o.push(u*c)}e.push(o)}return l(e)},F=(t,r=1/0)=>{if(t.length<=0)return null;if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=A(t);if(e===0)return null;let n=B(t);return n===null?null:Y(n,e,r)},Q=(t,r=1/0)=>y(t,r),y=(t,r=1/0)=>{let e=t.length;if(e<=0)return null;if(e!==t[0].length)throw new Error("The matrix must be square.");let n=v(t),o=L(t);return o===null?null:g(o,n,r)};var Kt=(t,r,e=1/0)=>s(Math.random()*(r-t)+t,e),K=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),Ut=()=>Math.random()<.5,Wt=t=>{let r=K(0,t.length-1);return t[r]};var _t=(t,r)=>(t%r+r)%r,$t=(t,r,e,n,o)=>(o-n)*(t-r)/(e-r)+n,Ct=(t,r,e,n)=>Math.max(t,e)<=Math.min(r,n),Pt=t=>!isNaN(parseFloat(t))&&isFinite(t);var tr=(t,r)=>{var n;if(t==null)return r;let e=(n=Number(t))!=null?n:r;return isNaN(e)?r:e};var rr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1]]},er=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1],o*r[2]+i*e[2]+c*n[2]]},nr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,a=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+a*o[0],i*r[1]+c*e[1]+u*n[1]+a*o[1]]},or=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,a=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+a*o[0],i*r[1]+c*e[1]+u*n[1]+a*o[1],i*r[2]+c*e[2]+u*n[2]+a*o[2]]};var ir=(t,r,e=1/0)=>{let n=[[t[0],t[1]],[r[0],r[1]]],o=F(n);if(o===null)return null;let i=[t[2],r[2]];return x(o,i,e)},cr=(t,r,e,n=1/0)=>{let o=[[t[0],t[1],t[2]],[r[0],r[1],r[2]],[e[0],e[1],e[2]]],i=Q(o);if(i===null)return null;let c=[t[2],r[2],e[2]];return x(i,c,n)},sr=(t,r=1/0)=>{if(t.length<=0)return null;let e=[];for(let i=0;i<t.length;i++){let c=[];for(let u=0;u<t[i].length-1;i++)c.push(t[i][u]);e.push(c)}let n=y(e);if(n===null)return null;let o=[];for(let i=0;i<t.length;i++){let c=t[i];o.push(c[c.length-1])}return x(n,o,r)};0&&(module.exports={convertRange,degreesToRadians,doRangesOverlap,equationSystem2,equationSystem3,equationSystemN,getRandom,getRandomBoolean,getRandomInt,getRandomItemFromArray,getV2Angle,identity2,identity3,identityN,isNumber,m2Adjugate,m2Determinant,m2DivideScalar,m2Inverse,m2MulScalar,m2Reset,m2Rotation,m2Scale,m2Sub,m2Sum,m2Transpose,m2x2,m3Adjugate,m3Determinant,m3DivideScalar,m3Inverse,m3MulScalar,m3Reset,m3RotationX,m3RotationY,m3RotationZ,m3Scale,m3Sub,m3Sum,m3Transpose,m3x3,mAdjugate,mDeterminant,mDivideScalar,mEqual,mInverse,mMinor,mMul,mMulScalar,mMulVector,mNxM,mReset,mSub,mSum,mTranspose,mod,radiansToDegrees,setDecimalPlaces,setV2Angle,stringToNumber,v2,v2CubicBezierCurve,v2DivideScalar,v2DotProduct,v2Length,v2MulScalar,v2Normalize,v2QuadraticBezierCurve,v2Rotate,v2Scale,v2SetLength,v2Sub,v2Sum,v3,v3CrossProduct,v3CubicBezierCurve,v3DivideScalar,v3DotProduct,v3Length,v3MulScalar,v3Normalize,v3QuadraticBezierCurve,v3RotateX,v3RotateY,v3RotateZ,v3Scale,v3Sub,v3Sum,vDivideScalar,vDotProduct,vEqual,vLength,vMulScalar,vN,vNormalize,vSub,vSum});
//# sourceMappingURL=tc-math.node.cjs.map
