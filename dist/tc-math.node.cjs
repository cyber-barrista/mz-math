/* 
Tool Cool Math Helpers
Version: 1.0.18
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var w=Object.defineProperty;var X=Object.getOwnPropertyDescriptor;var Y=Object.getOwnPropertyNames;var Z=Object.prototype.hasOwnProperty;var k=Math.pow;var _=(t,r)=>{for(var e in r)w(t,e,{get:r[e],enumerable:!0})},$=(t,r,e,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of Y(r))!Z.call(t,o)&&o!==e&&w(t,o,{get:()=>r[o],enumerable:!(n=X(r,o))||n.enumerable});return t};var C=t=>$(w({},"__esModule",{value:!0}),t);var Sr={};_(Sr,{circleMovement:()=>vr,convertRange:()=>pr,degreesToRadians:()=>rt,doRangesOverlap:()=>ar,ellipseMovement:()=>Ir,equationSystem2:()=>gr,equationSystem3:()=>br,equationSystemN:()=>yr,getRandom:()=>cr,getRandomBoolean:()=>sr,getRandomInt:()=>K,getRandomItemFromArray:()=>ur,getV2Angle:()=>S,getV2AngleBetween:()=>et,getV3AngleBetween:()=>nt,getVNAngleBetween:()=>D,identity2:()=>Ft,identity3:()=>Gt,identity4:()=>Qt,identityN:()=>Ht,isNumber:()=>mr,isSingularMatrix:()=>ir,m2Adjugate:()=>Q,m2AppendRow:()=>Jt,m2DeepCopy:()=>j,m2Determinant:()=>G,m2DivideScalar:()=>J,m2Inverse:()=>O,m2MulScalar:()=>Et,m2PrependRow:()=>Xt,m2Reset:()=>At,m2Sub:()=>St,m2Sum:()=>It,m2Transpose:()=>Tt,m2x2:()=>jt,m3Adjugate:()=>or,m3AppendRow:()=>Kt,m3DeepCopy:()=>q,m3Determinant:()=>nr,m3DivideScalar:()=>Rt,m3Inverse:()=>W,m3MulScalar:()=>dt,m3PrependRow:()=>Yt,m3Reset:()=>Nt,m3Sub:()=>Dt,m3Sum:()=>wt,m3Transpose:()=>zt,m3x3:()=>qt,m4x4:()=>Lt,mAdjugate:()=>H,mAppendCol:()=>Ot,mAppendRow:()=>kt,mDeepCopy:()=>x,mDelFirstColumn:()=>$t,mDelFirstRow:()=>_t,mDelLastColumn:()=>L,mDelLastRow:()=>Zt,mDeterminant:()=>b,mDivideScalar:()=>v,mEqual:()=>rr,mGetColumn:()=>Pt,mGetFirstColumn:()=>Ct,mGetLastColumn:()=>B,mInverse:()=>I,mMinor:()=>F,mMul:()=>tr,mMulScalar:()=>A,mMulVector:()=>g,mNxM:()=>Bt,mPrependCol:()=>Wt,mPrependRow:()=>Ut,mReset:()=>N,mSub:()=>z,mSum:()=>T,mTranspose:()=>V,mod:()=>xr,radiansToDegrees:()=>tt,setDecimalPlaces:()=>s,setV2Angle:()=>P,sineWaveMovement:()=>wr,stringToNumber:()=>Mr,v2:()=>bt,v2CubicBezierCurve:()=>lr,v2DivideScalar:()=>pt,v2DotProduct:()=>lt,v2Length:()=>E,v2MulScalar:()=>ut,v2Normalize:()=>ht,v2QuadraticBezierCurve:()=>hr,v2SetLength:()=>Mt,v2Sub:()=>ct,v2Sum:()=>ot,v3:()=>yt,v3CrossProduct:()=>gt,v3CubicBezierCurve:()=>Vr,v3DivideScalar:()=>at,v3DotProduct:()=>Vt,v3Length:()=>mt,v3MulScalar:()=>xt,v3Normalize:()=>ft,v3QuadraticBezierCurve:()=>fr,v3Sub:()=>st,v3Sum:()=>it,v4:()=>vt,vDivideScalar:()=>l,vDotProduct:()=>a,vEqual:()=>R,vLength:()=>y,vMulScalar:()=>f,vN:()=>d,vNormalize:()=>m,vSub:()=>h,vSum:()=>M});module.exports=C(Sr);var s=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=k(10,r);return Math.round(t*e)/e};var S=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return s(e,r)},P=(t,r,e=1/0)=>{let n=E(t);return[s(Math.cos(r)*n,e),s(Math.sin(r)*n,e)]},tt=(t,r=1/0)=>{let e=t*(180/Math.PI);return s(e,r)},rt=(t,r=1/0)=>{let e=t*(Math.PI/180);return s(e,r)},D=(t,r,e=1/0)=>{let n=m(t),o=m(r),i=a(n,o),c=Math.acos(i);return s(c,e)},et=(t,r,e=1/0)=>D(t,r,e),nt=(t,r,e=1/0)=>D(t,r,e);var M=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]+r[o],e));return n},ot=(t,r,e=1/0)=>M(t,r,e),it=(t,r,e=1/0)=>M(t,r,e),h=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]-r[o],e));return n},ct=(t,r,e=1/0)=>h(t,r,e),st=(t,r,e=1/0)=>h(t,r,e),f=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]*r,e));return n},ut=(t,r,e=1/0)=>f(t,r,e),xt=(t,r,e=1/0)=>f(t,r,e),l=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o=0;o<t.length;o++)n.push(s(t[o]/r,e));return n},pt=(t,r,e=1/0)=>l(t,r,e),at=(t,r,e=1/0)=>l(t,r,e),y=(t,r=1/0)=>{let e=0;for(let n=0;n<t.length;n++)e+=t[n]*t[n];return s(Math.sqrt(e),r)},E=(t,r=1/0)=>y(t,r),mt=(t,r=1/0)=>y(t,r),Mt=(t,r,e=1/0)=>{let n=S(t);return[s(Math.cos(n)*r,e),s(Math.sin(n)*r,e)]},m=(t,r=1/0)=>{let e=y(t),n=[];for(let o=0;o<t.length;o++)n.push(e===0?0:s(t[o]/e,r));return n},ht=(t,r=1/0)=>m(t,r),ft=(t,r=1/0)=>m(t,r),a=(t,r,e=1/0)=>{let n=0;for(let o=0;o<t.length;o++)n+=t[o]*r[o];return s(n,e)},lt=(t,r,e=1/0)=>a(t,r,e),Vt=(t,r,e=1/0)=>a(t,r,e),gt=(t,r,e=1/0)=>[s(t[1]*r[2]-t[2]*r[1],e),s(t[2]*r[0]-t[0]*r[2],e),s(t[0]*r[1]-t[1]*r[0],e)],bt=(t=0)=>[t,t],yt=(t=0)=>[t,t,t],vt=(t=0)=>[t,t,t,t],d=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let n=0;n<t;n++)e.push(r);return e},R=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var T=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(M(t[o],r[o],e));return n},It=(t,r,e=1/0)=>T(t,r,e),wt=(t,r,e=1/0)=>T(t,r,e),z=(t,r,e=1/0)=>{let n=[];for(let o=0;o<t.length;o++)n.push(h(t[o],r[o],e));return n},St=(t,r,e=1/0)=>z(t,r,e),Dt=(t,r,e=1/0)=>z(t,r,e),A=(t,r,e=1/0)=>{let n=[];for(let o of t)n.push(f(o,r,e));return n},Et=(t,r,e=1/0)=>A(t,r,e),dt=(t,r,e=1/0)=>A(t,r,e),v=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let n=[];for(let o of t)n.push(l(o,r,e));return n},J=(t,r,e=1/0)=>v(t,r,e),Rt=(t,r,e=1/0)=>v(t,r,e),V=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let n=[];for(let o=0;o<e;o++)n.push([]);for(let o=0;o<r;o++)for(let i=0;i<e;i++)n[i].push(t[o][i]);return n},Tt=t=>V(t),zt=t=>V(t),N=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++){let o=t[n].length,i=[];for(let c=0;c<o;c++)i.push(r);e.push(i)}return e},At=(t,r=0)=>N(t,r),Nt=(t,r=0)=>N(t,r),jt=(t=0)=>[[t,t],[t,t]],qt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Lt=(t=0)=>[[t,t,t,t],[t,t,t,t],[t,t,t,t],[t,t,t,t]],Bt=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let n=[];for(let o=0;o<t;o++)n.push(d(r,e));return n},Ft=()=>[[1,0],[0,1]],Gt=()=>[[1,0,0],[0,1,0],[0,0,1]],Qt=()=>[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],Ht=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let n=[];for(let o=0;o<t;o++)n.push(e===o?1:0);r.push(n)}return r},x=t=>{let r=[];for(let e=0;e<t.length;e++){let n=t[e],o=[];for(let i=0;i<n.length;i++)o.push(n[i]);r.push(o)}return r},j=t=>x(t),q=t=>x(t),Ot=(t,r)=>{if(t.length<=0)return[];let e=x(t);for(let n=0;n<e.length;n++)e[n].push(r[n]);return e},Wt=(t,r)=>{if(t.length<=0)return[];let e=x(t);for(let n=0;n<e.length;n++)e[n].unshift(r[n]);return e},kt=(t,r)=>{let e=x(t);return e.push(r),e},Jt=(t,r)=>{let e=j(t);return e.push(r),e},Kt=(t,r)=>{let e=q(t);return e.push(r),e},Ut=(t,r)=>{let e=x(t);return e.unshift(r),e},Xt=(t,r)=>{let e=j(t);return e.unshift(r),e},Yt=(t,r)=>{let e=q(t);return e.unshift(r),e},Zt=t=>{if(t.length<=0)return[];let r=x(t);return r.pop(),r},_t=t=>{if(t.length<=0)return[];let r=x(t);return r.shift(),r},L=t=>{if(t.length<=0)return[];let r=x(t);for(let e=0;e<r.length;e++)r[e].pop();return r},$t=t=>{if(t.length<=0)return[];let r=x(t);for(let e=0;e<r.length;e++)r[e].shift();return r},Ct=t=>{if(t.length<=0)return[];let r=[];for(let e=0;e<t.length;e++)r.push(t[e][0]);return r},B=t=>{if(t.length<=0)return[];let r=t[0].length,e=[];for(let n=0;n<t.length;n++)e.push(t[n][r-1]);return e},Pt=(t,r)=>{if(t.length<=0)return[];let e=[];for(let n=0;n<t.length;n++)e.push(t[n][r]);return e},tr=(t,r,e=1/0)=>{let n=[];for(let i=0;i<t.length;i++)n.push([]);let o=V(r);if(n.length!==o.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let i=0;i<t.length;i++){let c=t[i];for(let u=0;u<o.length;u++){let p=o[u],U=a(c,p,e);n[i].push(U)}}return n},g=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let n=[];for(let o=0;o<t.length;o++)n[o]=a(t[o],r,e);return n},rr=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!R(t[e],r[e]))return!1;return!0},er=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=[];for(let i=0;i<n;i++){if(i===r)continue;let c=[];for(let u=0;u<n;u++)u!==e&&c.push(t[i][u]);o.push(c)}return o},F=(t,r,e)=>{let n=t.length;if(n<=0)throw new Error("The matrix should not be empty.");if(n!==t[0].length)throw new Error("The matrix must be square.");let o=er(t,r,e);return b(o)},b=t=>{let r=t.length;if(r===0)return 1;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t[0][0];if(r===2)return G(t);let e=0;for(let n=0;n<r;n++){let o=F(t,0,n),i=t[0][n];n%2!==0&&(i=-i),e+=o*i}return e},G=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},nr=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return b(t)},Q=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]]},or=t=>H(t),H=t=>{let r=t.length;if(r<=0)return null;if(r!==t[0].length)throw new Error("The matrix must be square.");if(r===1)return t;if(r===2)return Q(t);let e=[];for(let n=0;n<r;n++){let o=[];for(let i=0;i<r;i++){let c=F(t,n,i),u=Math.pow(-1,n+i);o.push(u*c)}e.push(o)}return V(e)},ir=t=>{if(t.length>0&&t.length!==t[0].length)throw new Error("The matrix must be square.");return b(t)===0},O=(t,r=1/0)=>{if(t.length>0&&t.length!==t[0].length)throw new Error("The matrix must be square.");let e=G(t);if(e===0)return null;let n=Q(t);return n===null?null:J(n,e,r)},W=(t,r=1/0)=>I(t,r),I=(t,r=1/0)=>{let e=t.length;if(e>0&&e!==t[0].length)throw new Error("The matrix must be square.");let n=b(t),o=H(t);return o===null?null:v(o,n,r)};var cr=(t,r,e=1/0)=>s(Math.random()*(r-t)+t,e),K=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),sr=()=>Math.random()<.5,ur=t=>{let r=K(0,t.length-1);return t[r]};var xr=(t,r)=>(t%r+r)%r,pr=(t,r,e,n,o)=>(o-n)*(t-r)/(e-r)+n,ar=(t,r,e,n)=>Math.max(t,e)<=Math.min(r,n),mr=t=>!isNaN(parseFloat(t))&&isFinite(t);var Mr=(t,r)=>{var n;if(t==null)return r;let e=(n=Number(t))!=null?n:r;return isNaN(e)?r:e};var hr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1]]},fr=(t,r,e,n)=>{let o=Math.pow(1-t,2),i=(1-t)*2*t,c=t*t;return[o*r[0]+i*e[0]+c*n[0],o*r[1]+i*e[1]+c*n[1],o*r[2]+i*e[2]+c*n[2]]},lr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,p=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+p*o[0],i*r[1]+c*e[1]+u*n[1]+p*o[1]]},Vr=(t,r,e,n,o)=>{let i=Math.pow(1-t,3),c=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,p=t*t*t;return[i*r[0]+c*e[0]+u*n[0]+p*o[0],i*r[1]+c*e[1]+u*n[1]+p*o[1],i*r[2]+c*e[2]+u*n[2]+p*o[2]]};var gr=(t,r,e=1/0)=>{let n=[[t[0],t[1]],[r[0],r[1]]],o=O(n);if(o===null)return null;let i=[t[2],r[2]];return g(o,i,e)},br=(t,r,e,n=1/0)=>{let o=[[t[0],t[1],t[2]],[r[0],r[1],r[2]],[e[0],e[1],e[2]]],i=W(o);if(i===null)return null;let c=[t[3],r[3],e[3]];return g(i,c,n)},yr=(t,r=1/0)=>{if(t.length<=0)return null;let e=L(t),n=I(e);if(n===null)return null;let o=B(t);return g(n,o,r)};var vr=(t,r,e)=>(r=r%Math.PI*2,[t[0]+Math.cos(r)*e,t[1]+Math.sin(r)*e]),Ir=(t,r,e,n)=>(r=r%Math.PI*2,[t[0]+Math.cos(r)*e,t[1]+Math.sin(r)*n]),wr=(t,r,e,n)=>{let o=r*Math.sin(2*Math.PI*e*t+n);return[t,o]};0&&(module.exports={circleMovement,convertRange,degreesToRadians,doRangesOverlap,ellipseMovement,equationSystem2,equationSystem3,equationSystemN,getRandom,getRandomBoolean,getRandomInt,getRandomItemFromArray,getV2Angle,getV2AngleBetween,getV3AngleBetween,getVNAngleBetween,identity2,identity3,identity4,identityN,isNumber,isSingularMatrix,m2Adjugate,m2AppendRow,m2DeepCopy,m2Determinant,m2DivideScalar,m2Inverse,m2MulScalar,m2PrependRow,m2Reset,m2Sub,m2Sum,m2Transpose,m2x2,m3Adjugate,m3AppendRow,m3DeepCopy,m3Determinant,m3DivideScalar,m3Inverse,m3MulScalar,m3PrependRow,m3Reset,m3Sub,m3Sum,m3Transpose,m3x3,m4x4,mAdjugate,mAppendCol,mAppendRow,mDeepCopy,mDelFirstColumn,mDelFirstRow,mDelLastColumn,mDelLastRow,mDeterminant,mDivideScalar,mEqual,mGetColumn,mGetFirstColumn,mGetLastColumn,mInverse,mMinor,mMul,mMulScalar,mMulVector,mNxM,mPrependCol,mPrependRow,mReset,mSub,mSum,mTranspose,mod,radiansToDegrees,setDecimalPlaces,setV2Angle,sineWaveMovement,stringToNumber,v2,v2CubicBezierCurve,v2DivideScalar,v2DotProduct,v2Length,v2MulScalar,v2Normalize,v2QuadraticBezierCurve,v2SetLength,v2Sub,v2Sum,v3,v3CrossProduct,v3CubicBezierCurve,v3DivideScalar,v3DotProduct,v3Length,v3MulScalar,v3Normalize,v3QuadraticBezierCurve,v3Sub,v3Sum,v4,vDivideScalar,vDotProduct,vEqual,vLength,vMulScalar,vN,vNormalize,vSub,vSum});
//# sourceMappingURL=tc-math.node.cjs.map
