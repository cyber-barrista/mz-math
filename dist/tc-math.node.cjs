/* 
Tool Cool Math Helpers
Version: 1.0.8
Documentation: https://github.com/toolcool-org/toolcool-math
License: MIT License        
Author: Tool Cool, toolcool.org@gmail.com>                          
*/
var v=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var J=Object.prototype.hasOwnProperty;var R=Math.pow;var K=(t,r)=>{for(var e in r)v(t,e,{get:r[e],enumerable:!0})},U=(t,r,e,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of H(r))!J.call(t,n)&&n!==e&&v(t,n,{get:()=>r[n],enumerable:!(o=G(r,n))||o.enumerable});return t};var W=t=>U(v({},"__esModule",{value:!0}),t);var Ct={};K(Ct,{convertRange:()=>kt,degreesToRadians:()=>C,doRangesOverlap:()=>Gt,equationSystem2:()=>$t,getRandom:()=>Xt,getRandomBoolean:()=>Yt,getRandomInt:()=>O,getRandomItemFromArray:()=>Zt,getV2Angle:()=>y,identity2:()=>Nt,identity3:()=>Tt,identityN:()=>qt,isNumber:()=>Ht,m2Adjugate:()=>Z,m2Determinant:()=>Y,m2DivideScalar:()=>B,m2Inverse:()=>j,m2MulScalar:()=>lt,m2Reset:()=>St,m2Rotation:()=>L,m2Scale:()=>Q,m2Sub:()=>ft,m2Sum:()=>Vt,m2Transpose:()=>It,m2x2:()=>Dt,m3DivideScalar:()=>yt,m3MulScalar:()=>vt,m3Reset:()=>wt,m3RotationX:()=>d,m3RotationY:()=>A,m3RotationZ:()=>F,m3Scale:()=>X,m3Sub:()=>bt,m3Sum:()=>ht,m3Transpose:()=>gt,m3x3:()=>zt,mDivideScalar:()=>T,mEqual:()=>Rt,mMul:()=>jt,mMulScalar:()=>N,mMulVector:()=>x,mNxM:()=>Et,mReset:()=>q,mSub:()=>E,mSum:()=>z,mTranspose:()=>l,mod:()=>Ot,radiansToDegrees:()=>$,setDecimalPlaces:()=>i,setV2Angle:()=>_,stringToNumber:()=>Jt,v2:()=>pt,v2CubicBezierCurve:()=>Wt,v2DivideScalar:()=>ct,v2DotProduct:()=>xt,v2Length:()=>I,v2MulScalar:()=>ot,v2Normalize:()=>S,v2QuadraticBezierCurve:()=>Kt,v2Rotate:()=>Bt,v2Scale:()=>Ft,v2SetLength:()=>ut,v2Sub:()=>rt,v2Sum:()=>P,v3:()=>Mt,v3CrossProduct:()=>mt,v3CubicBezierCurve:()=>_t,v3DivideScalar:()=>it,v3DotProduct:()=>at,v3Length:()=>st,v3MulScalar:()=>nt,v3Normalize:()=>f,v3QuadraticBezierCurve:()=>Ut,v3RotateX:()=>Lt,v3RotateY:()=>dt,v3RotateZ:()=>At,v3Scale:()=>Qt,v3Sub:()=>et,v3Sum:()=>tt,vDivideScalar:()=>h,vDotProduct:()=>m,vEqual:()=>D,vLength:()=>b,vMulScalar:()=>V,vN:()=>w,vNormalize:()=>g,vSub:()=>M,vSum:()=>p});module.exports=W(Ct);var i=(t,r=1/0)=>{if(r===1/0)return t;r<0&&(r=0);let e=R(10,r);return Math.round(t*e)/e};var y=(t,r=1/0)=>{let e=Math.atan2(t[1],t[0]);return i(e,r)},_=(t,r,e=1/0)=>{let o=I(t);return[i(Math.cos(r)*o,e),i(Math.sin(r)*o,e)]},$=(t,r=1/0)=>{let e=t*(180/Math.PI);return i(e,r)},C=(t,r=1/0)=>{let e=t*(Math.PI/180);return i(e,r)};var p=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]+r[n],e));return o},P=(t,r,e=1/0)=>p(t,r,e),tt=(t,r,e=1/0)=>p(t,r,e),M=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]-r[n],e));return o},rt=(t,r,e=1/0)=>M(t,r,e),et=(t,r,e=1/0)=>M(t,r,e),V=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]*r,e));return o},ot=(t,r,e=1/0)=>V(t,r,e),nt=(t,r,e=1/0)=>V(t,r,e),h=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let o=[];for(let n=0;n<t.length;n++)o.push(i(t[n]/r,e));return o},ct=(t,r,e=1/0)=>h(t,r,e),it=(t,r,e=1/0)=>h(t,r,e),b=(t,r=1/0)=>{let e=0;for(let o=0;o<t.length;o++)e+=t[o]*t[o];return i(Math.sqrt(e),r)},I=(t,r=1/0)=>b(t,r),st=(t,r=1/0)=>b(t,r),ut=(t,r,e=1/0)=>{let o=y(t);return[i(Math.cos(o)*r,e),i(Math.sin(o)*r,e)]},g=(t,r=1/0)=>{let e=b(t),o=[];for(let n=0;n<t.length;n++)o.push(e===0?0:i(t[n]/e,r));return o},S=(t,r=1/0)=>g(t,r),f=(t,r=1/0)=>g(t,r),m=(t,r,e=1/0)=>{let o=0;for(let n=0;n<t.length;n++)o+=t[n]*r[n];return i(o,e)},xt=(t,r,e=1/0)=>m(t,r,e),at=(t,r,e=1/0)=>m(t,r,e),mt=(t,r,e=1/0)=>[i(t[1]*r[2]-t[2]*r[1],e),i(t[2]*r[0]-t[0]*r[2],e),i(t[0]*r[1]-t[1]*r[0],e)],pt=(t=0)=>[t,t],Mt=(t=0)=>[t,t,t],w=(t,r=0)=>{if(t<0)throw new Error("N must be a non-negative number.");let e=[];for(let o=0;o<t;o++)e.push(r);return e},D=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(t[e]!==r[e])return!1;return!0};var z=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(p(t[n],r[n],e));return o},Vt=(t,r,e=1/0)=>z(t,r,e),ht=(t,r,e=1/0)=>z(t,r,e),E=(t,r,e=1/0)=>{let o=[];for(let n=0;n<t.length;n++)o.push(M(t[n],r[n],e));return o},ft=(t,r,e=1/0)=>E(t,r,e),bt=(t,r,e=1/0)=>E(t,r,e),N=(t,r,e=1/0)=>{let o=[];for(let n of t)o.push(V(n,r,e));return o},lt=(t,r,e=1/0)=>N(t,r,e),vt=(t,r,e=1/0)=>N(t,r,e),T=(t,r,e=1/0)=>{if(r===0)throw new Error("Division by zero error.");let o=[];for(let n of t)o.push(h(n,r,e));return o},B=(t,r,e=1/0)=>T(t,r,e),yt=(t,r,e=1/0)=>T(t,r,e),l=t=>{let r=t.length;if(r<=0)return t;let e=t[0].length;if(e<=0)return t;let o=[];for(let n=0;n<e;n++)o.push([]);for(let n=0;n<r;n++)for(let c=0;c<e;c++)o[c].push(t[n][c]);return o},It=t=>l(t),gt=t=>l(t),q=(t,r=0)=>{if(t.length<=0)return[];let e=[];for(let o=0;o<t.length;o++){let n=t[o].length,c=[];for(let s=0;s<n;s++)c.push(r);e.push(c)}return e},St=(t,r=0)=>q(t,r),wt=(t,r=0)=>q(t,r),Dt=(t=0)=>[[t,t],[t,t]],zt=(t=0)=>[[t,t,t],[t,t,t],[t,t,t]],Et=(t,r,e=0)=>{if(t<=0||r<=0)throw new Error("M and N must be positive numbers.");let o=[];for(let n=0;n<t;n++)o.push(w(r,e));return o},Nt=()=>[[1,0],[0,1]],Tt=()=>[[1,0,0],[0,1,0],[0,0,1]],qt=t=>{if(t<0)throw new Error("N must be a non-negative number.");if(t===0)return[];let r=[];for(let e=0;e<t;e++){let o=[];for(let n=0;n<t;n++)o.push(e===n?1:0);r.push(o)}return r},jt=(t,r,e=1/0)=>{let o=[];for(let c=0;c<t.length;c++)o.push([]);let n=l(r);if(o.length!==n.length)throw new Error("The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.");for(let c=0;c<t.length;c++){let s=t[c];for(let u=0;u<n.length;u++){let a=n[u],k=m(s,a,e);o[c].push(k)}}return o},x=(t,r,e=1/0)=>{if(t.length<0)return[];if(t[0].length!==r.length)throw new Error("The number of columns in the matrix must be equal to the length of the vector.");let o=[];for(let n=0;n<t.length;n++)o[n]=m(t[n],r,e);return o},Rt=(t,r)=>{if(t.length!==r.length)return!1;for(let e=0;e<t.length;e++)if(!D(t[e],r[e]))return!1;return!0},L=t=>[[Math.cos(t),-Math.sin(t)],[Math.sin(t),Math.cos(t)]],Bt=(t,r)=>{let e=S(r);return x(L(t),e)},d=t=>[[1,0,0],[0,Math.cos(t),-Math.sin(t)],[0,Math.sin(t),Math.cos(t)]],Lt=(t,r)=>{let e=f(r);return x(d(t),e)},A=t=>[[Math.cos(t),0,Math.sin(t)],[0,1,0],[-Math.sin(t),0,Math.cos(t)]],dt=(t,r)=>{let e=f(r);return x(A(t),e)},F=t=>[[Math.cos(t),-Math.sin(t),0],[Math.sin(t),Math.cos(t),0],[0,0,1]],At=(t,r)=>{let e=f(r);return x(F(t),e)},Q=t=>[[t[0],0],[0,t[1]]],Ft=(t,r)=>x(Q(t),r),X=t=>[[t[0],0,0],[0,t[1],0],[0,0,t[2]]],Qt=(t,r)=>x(X(t),r),Y=t=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");return t[0][0]*t[1][1]-t[1][0]*t[0][1]},Z=t=>[[t[1][1],-t[0][1]],[-t[1][0],t[0][0]]],j=(t,r=1/0)=>{if(t.length!==t[0].length)throw new Error("The matrix must be square.");let e=Y(t);if(e===0)return null;let o=Z(t);return B(o,e,r)};var Xt=(t,r,e=1/0)=>i(Math.random()*(r-t)+t,e),O=(t,r)=>Math.floor(Math.random()*(r-t+1)+t),Yt=()=>Math.random()<.5,Zt=t=>{let r=O(0,t.length-1);return t[r]};var Ot=(t,r)=>(t%r+r)%r,kt=(t,r,e,o,n)=>(n-o)*(t-r)/(e-r)+o,Gt=(t,r,e,o)=>Math.max(t,e)<=Math.min(r,o),Ht=t=>!isNaN(parseFloat(t))&&isFinite(t);var Jt=(t,r)=>{var o;if(t==null)return r;let e=(o=Number(t))!=null?o:r;return isNaN(e)?r:e};var Kt=(t,r,e,o)=>{let n=Math.pow(1-t,2),c=(1-t)*2*t,s=t*t;return[n*r[0]+c*e[0]+s*o[0],n*r[1]+c*e[1]+s*o[1]]},Ut=(t,r,e,o)=>{let n=Math.pow(1-t,2),c=(1-t)*2*t,s=t*t;return[n*r[0]+c*e[0]+s*o[0],n*r[1]+c*e[1]+s*o[1],n*r[2]+c*e[2]+s*o[2]]},Wt=(t,r,e,o,n)=>{let c=Math.pow(1-t,3),s=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,a=t*t*t;return[c*r[0]+s*e[0]+u*o[0]+a*n[0],c*r[1]+s*e[1]+u*o[1]+a*n[1]]},_t=(t,r,e,o,n)=>{let c=Math.pow(1-t,3),s=Math.pow(1-t,2)*3*t,u=(1-t)*3*t*t,a=t*t*t;return[c*r[0]+s*e[0]+u*o[0]+a*n[0],c*r[1]+s*e[1]+u*o[1]+a*n[1],c*r[2]+s*e[2]+u*o[2]+a*n[2]]};var $t=(t,r,e=1/0)=>{let o=[[t[0],t[1]],[r[0],r[1]]],n=j(o);if(n===null)return null;let c=[t[2],r[2]];return x(n,c,e)};0&&(module.exports={convertRange,degreesToRadians,doRangesOverlap,equationSystem2,getRandom,getRandomBoolean,getRandomInt,getRandomItemFromArray,getV2Angle,identity2,identity3,identityN,isNumber,m2Adjugate,m2Determinant,m2DivideScalar,m2Inverse,m2MulScalar,m2Reset,m2Rotation,m2Scale,m2Sub,m2Sum,m2Transpose,m2x2,m3DivideScalar,m3MulScalar,m3Reset,m3RotationX,m3RotationY,m3RotationZ,m3Scale,m3Sub,m3Sum,m3Transpose,m3x3,mDivideScalar,mEqual,mMul,mMulScalar,mMulVector,mNxM,mReset,mSub,mSum,mTranspose,mod,radiansToDegrees,setDecimalPlaces,setV2Angle,stringToNumber,v2,v2CubicBezierCurve,v2DivideScalar,v2DotProduct,v2Length,v2MulScalar,v2Normalize,v2QuadraticBezierCurve,v2Rotate,v2Scale,v2SetLength,v2Sub,v2Sum,v3,v3CrossProduct,v3CubicBezierCurve,v3DivideScalar,v3DotProduct,v3Length,v3MulScalar,v3Normalize,v3QuadraticBezierCurve,v3RotateX,v3RotateY,v3RotateZ,v3Scale,v3Sub,v3Sum,vDivideScalar,vDotProduct,vEqual,vLength,vMulScalar,vN,vNormalize,vSub,vSum});
//# sourceMappingURL=tc-math.node.cjs.map
