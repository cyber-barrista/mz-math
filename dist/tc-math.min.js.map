{
  "version": 3,
  "sources": ["../src/vector.ts", "../src/format.ts", "../src/angle.ts", "../src/matrix.ts", "../src/random.ts", "../src/other.ts", "../src/convert.ts", "../src/bezier-curve.ts", "../src/equations.ts", "../src/index.ts"],
  "sourcesContent": ["import { Vector, Vector2, Vector3 } from './types';\nimport { setDecimalPlaces } from './format';\nimport { getV2Angle } from './angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ DIVIDE ------------------------\n\nexport const vDivideScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] / scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2DivideScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vDivideScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3DivideScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vDivideScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ------------ NORMALIZE ------------------------\n\n/**\n * Normalization creates a unit vector, which is a vector of length 1.\n */\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const unitVector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        unitVector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return unitVector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};", "export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector2 } from './types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length } from './vector';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};", "import { Matrix2, Matrix3, Matrix, Vector, Vector2, Vector3 } from './types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual, v2Normalize, v3Normalize, vDivideScalar } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- DIVIDE SCALAR ----------------------\n\nexport const mDivideScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vDivideScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2DivideScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mDivideScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3DivideScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mDivideScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n\n// --------------- TRANSPOSE ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mDeepCopy = (m: Matrix): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const v = m[i];\n        const vector: Vector = [];\n        for(let j=0; j<v.length; j++){\n            vector.push(v[j]);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\nexport const m2DeepCopy = (m2: Matrix2): Matrix2 => {\n    return mDeepCopy(m2) as Matrix2;\n};\n\nexport const m3DeepCopy = (m3: Matrix3): Matrix3 => {\n    return mDeepCopy(m3) as Matrix3;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mAppendCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].push(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mPrependCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].unshift(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mAppendRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.push(row);\n    return copy;\n};\n\nexport const m2AppendRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.push(row);\n    return copy;\n};\n\nexport const m3AppendRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.push(row);\n    return copy;\n};\n\nexport const mPrependRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m2PrependRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m3PrependRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.unshift(row);\n    return copy;\n};\n\n// --------------- MULTIPLICATION ------------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -----------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n\n// ---------------- ROTATION MATRICES -------------\n\nexport const m2Rotation = (angleRad: number): Matrix2 => {\n    return [\n      [Math.cos(angleRad), -Math.sin(angleRad)],\n      [Math.sin(angleRad), Math.cos(angleRad)],\n    ];\n};\n\nexport const v2Rotate = (angleRad: number, vector: Vector2): Vector2 => {\n    const unitVector = v2Normalize(vector);\n    return mMulVector(m2Rotation(angleRad), unitVector) as Vector2;\n};\n\n/**\n * Rotation around the X axis.\n */\nexport const m3RotationX = (angleRad: number): Matrix3 => {\n    return [\n      [1, 0, 0],\n      [0, Math.cos(angleRad), -Math.sin(angleRad)],\n      [0, Math.sin(angleRad), Math.cos(angleRad)],\n    ];\n};\n\nexport const v3RotateX = (angleRad: number, vector: Vector3): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationX(angleRad), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Y axis.\n */\nexport const m3RotationY = (angleRad: number): Matrix3 => {\n    return [\n        [Math.cos(angleRad), 0, Math.sin(angleRad)],\n        [0, 1, 0],\n        [-Math.sin(angleRad), 0, Math.cos(angleRad)],\n    ];\n};\n\nexport const v3RotateY = (angleRad: number, vector: Vector3): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationY(angleRad), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Z axis.\n */\nexport const m3RotationZ = (angleRad: number): Matrix3 => {\n    return [\n        [Math.cos(angleRad), -Math.sin(angleRad), 0],\n        [Math.sin(angleRad), Math.cos(angleRad), 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const v3RotateZ = (angleRad: number, vector: Vector3): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationZ(angleRad), unitVector) as Vector3;\n};\n\n// ---------------- SCALE MATRICES -------------\n\nexport const m2Scale = (scaleVector: Vector2): Matrix2 => {\n    return [\n        [scaleVector[0], 0],\n        [0, scaleVector[1]],\n    ];\n};\n\nexport const v2Scale = (scaleVector: Vector2, vector: Vector2): Vector2 => {\n    return mMulVector(m2Scale(scaleVector), vector) as Vector2;\n};\n\nexport const m3Scale = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, scaleVector[2]],\n    ];\n};\n\nexport const v3Scale = (scaleVector: Vector3, vector: Vector3): Vector3 => {\n    return mMulVector(m3Scale(scaleVector), vector) as Vector3;\n};\n\n// ------------------- Determinant ---------------\n\n/**\n * Returns a matrix without provided row / col.\n * If we received a matrix M (mxm) ===> returns matrix N (m-1 x m-1)\n * The matrix must be square.\n */\nconst mMinorHelper = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        if(i === row) continue;\n\n        const vector: Vector = [];\n\n        for(let j=0; j<size; j++){\n            if(j === col) continue;\n            vector.push(m[i][j]);\n        }\n\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n/**\n * Calculate matrix minor.\n */\nexport const mMinor = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // prepare the matrix without provided row and column\n    const matrix = mMinorHelper(m, row, col);\n\n    // calculate the matrix determinant\n    return mDeterminant(matrix);\n};\n\n/**\n * Calculate determinant for NxN matrix.\n * Matrix should be square.\n */\nexport const mDeterminant = (matrix: Matrix): number => {\n    const size = matrix.length;\n    if(size === 0) return 1;\n\n    if(size !== matrix[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return matrix[0][0];\n    if(size === 2) return m2Determinant(matrix as Matrix2);\n\n    let d = 0;\n\n    for(let i=0; i<size; i++){\n        const minor = mMinor(matrix, 0, i);\n\n        let param = matrix[0][i];\n        if(i % 2 !== 0){\n            param = -param;\n        }\n\n        d += minor * param;\n    }\n\n    return d;\n};\n\n/**\n * Calculate determinant for 2x2 matrix.\n * Matrix should be square.\n */\nexport const m2Determinant = (m2: Matrix2): number => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return m2[0][0] * m2[1][1] - m2[1][0] * m2[0][1];\n};\n\n/**\n * Calculate determinant for 3x3 matrix.\n * Matrix should be square.\n */\nexport const m3Determinant = (m3: Matrix3): number => {\n    if(m3.length !== m3[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return mDeterminant(m3);\n};\n\n// ------------------ INVERSE -----------------------\n\nexport const m2Adjugate = (m2: Matrix2): Matrix2|null => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return [\n      [m2[1][1], -m2[0][1]],\n      [-m2[1][0], m2[0][0]],\n    ];\n};\n\nexport const m3Adjugate = (m3: Matrix3) : Matrix3|null => {\n    return mAdjugate(m3) as (Matrix3|null);\n};\n\n/**\n * Adjugate is a transpose of a cofactor matrix\n */\nexport const mAdjugate = (m: Matrix): Matrix|null => {\n\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return m;\n\n    if(size === 2) return m2Adjugate(m as Matrix2);\n\n    // build a cofactor matrix ----------------\n    const cofactors: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            const minor = mMinor(m, i, j);\n            const sign = Math.pow(-1, i + j)\n            vector.push(sign * minor);\n        }\n        cofactors.push(vector);\n    }\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    return mTranspose(cofactors);\n};\n\n/**\n * Square matrix A (nxn) is invertible is there is another square matrix B (nxn) so AxB = BxA = I\n * For A (2x2) matrix, the inverse is:\n * (1 / (determinant(A))) * adj(A)\n * Singular Matrix = a square matrix that does not have a matrix inverse. A matrix is singular iff its determinant is 0.\n */\nexport const m2Inverse = (m2: Matrix2, decimalPlaces = Infinity): (Matrix2 | null) => {\n    if(m2.length <= 0) return null;\n\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = m2Determinant(m2);\n    if(d === 0) return null;\n\n    const adj = m2Adjugate(m2);\n    if(adj === null) return null;\n\n    return m2DivideScalar(adj, d, decimalPlaces);\n};\n\nexport const m3Inverse = (m3: Matrix3, decimalPlaces = Infinity): (Matrix3 | null) => {\n    return mInverse(m3, decimalPlaces) as (Matrix3|null);\n};\n\nexport const mInverse = (m: Matrix, decimalPlaces = Infinity): (Matrix | null) => {\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // find a determinant ----------------------\n    const d = mDeterminant(m);\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    const adj = mAdjugate(m);\n    if(adj === null) return null;\n\n    return mDivideScalar(adj, d, decimalPlaces);\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { Vector2, Vector3 } from './types';\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1],\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1],\n        temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2],\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1],\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1],\n        temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2],\n    ];\n};\n", "import { Matrix, Matrix2, Matrix3, Vector, Vector2, Vector3 } from './types';\nimport { m2Inverse, m3Inverse, mInverse, mMulVector } from './matrix';\n\n/**\n * System of 2 linear equations.\n * [x, y] = inverse(Matrix of equation parameters) x (vector of equation results)\n * ---------------\n * 3x + 2y = 7\n * -6x + 6y = 6\n */\nexport const equationSystem2 = (equation1: Vector3, equation2: Vector3, decimalPlaces = Infinity) : Vector2 | null => {\n    const equationParams: Matrix2 = [\n        [equation1[0], equation1[1]],\n        [equation2[0], equation2[1]],\n    ];\n\n    const inversed = m2Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector2 = [\n        equation1[2],\n        equation2[2]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector2;\n};\n\n/**\n * System of 3 linear equations.\n * ---------------------------------------\n * 3x + 2y + 5z = 7\n * -6x + 6y + 6z = 6\n * 2x + 7y - z = 4\n */\nexport const equationSystem3 = (\n    equation1: Vector,\n    equation2: Vector,\n    equation3: Vector,\n    decimalPlaces = Infinity) : Vector3 | null => {\n    const equationParams: Matrix3 = [\n        [equation1[0], equation1[1], equation1[2]],\n        [equation2[0], equation2[1], equation2[2]],\n        [equation3[0], equation3[1], equation3[2]],\n    ];\n\n    const inversed = m3Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector3 = [\n        equation1[3],\n        equation2[3],\n        equation3[3]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector3;\n};\n\n/**\n * System of N linear equations.\n */\nexport const equationSystemN = (equations: Matrix, decimalPlaces = Infinity) : Vector | null => {\n    if(equations.length <= 0) return null;\n\n    const equationParams: Matrix = [];\n    const size = equations.length;\n\n    // fill params matrix - it contains all values from equations matrix except the last column,\n    // as the last columns is the results\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(equations[i][j]);\n        }\n        equationParams.push(vector);\n    }\n\n    const inversed = mInverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    // the last column of the equations matrix\n    const equationResults: Vector = [];\n    for(let i=0; i<size; i++){\n        const row = equations[i];\n        equationResults.push(row[row.length - 1]);\n    }\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector;\n};", "import * as vector from './vector';\nimport * as matrix from './matrix';\nimport * as format from './format';\nimport * as angle from './angle';\nimport * as random from './random';\nimport * as other from './other';\nimport * as convert from './convert';\nimport * as bezierCurve from './bezier-curve';\nimport * as equations from './equations';\n\nconst api = {\n    ...vector,\n    ...matrix,\n    ...format,\n    ...angle,\n    ...random,\n    ...other,\n    ...convert,\n    ...bezierCurve,\n    ...equations,\n};\n\ndeclare global {\n    interface Window {\n        TCMath: typeof api,\n    }\n}\n\nwindow.TCMath = window.TCMath || api;\n\nexport * from './vector';\nexport * from './matrix';\nexport * from './format';\nexport * from './angle';\nexport * from './random';\nexport * from './other';\nexport * from './convert';\nexport * from './bezier-curve';\nexport * from './equations';"],
  "mappings": ";;;;;;;gbAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,QAAAE,GAAA,mBAAAC,GAAA,iBAAAC,GAAA,aAAAC,EAAA,gBAAAC,GAAA,gBAAAC,EAAA,gBAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,OAAAC,GAAA,mBAAAC,GAAA,mBAAAC,GAAA,iBAAAC,GAAA,aAAAC,GAAA,gBAAAC,GAAA,gBAAAC,EAAA,UAAAC,GAAA,UAAAC,GAAA,kBAAAC,EAAA,gBAAAC,EAAA,WAAAC,EAAA,YAAAC,EAAA,eAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,SAAAC,EAAA,SAAAC,ICAA,IAAAC,EAAA,GAAAC,EAAAD,EAAA,sBAAAE,IAAO,IAAMC,EAAmB,CAACC,EAAaC,EAAoC,MAAa,CAC3F,GAAGA,IAAkB,IAAU,OAAOD,EAEnCC,EAAgB,IACfA,EAAgB,GAGpB,IAAMC,EAAcC,GAAA,GAAMF,GAC1B,OAAO,KAAK,MAAMD,EAAME,CAAW,EAAIA,CAC3C,ECTA,IAAAE,EAAA,GAAAC,EAAAD,EAAA,sBAAAE,GAAA,eAAAC,EAAA,qBAAAC,GAAA,eAAAC,KAIO,IAAMC,EAAa,CAACC,EAAaC,EAAgB,MAAa,CACjE,IAAMC,EAAQ,KAAK,MAAMF,EAAG,GAAIA,EAAG,EAAE,EACrC,OAAOG,EAAiBD,EAAOD,CAAa,CAChD,EAEaG,GAAa,CAACJ,EAAaK,EAAqBJ,EAAgB,MAAsB,CAC/F,IAAMK,EAASC,EAASP,CAAE,EAC1B,MAAO,CACHG,EAAiB,KAAK,IAAIE,CAAW,EAAIC,EAAQL,CAAa,EAC9DE,EAAiB,KAAK,IAAIE,CAAW,EAAIC,EAAQL,CAAa,CAClE,CACJ,EAEaO,GAAmB,CAACC,EAAiBR,EAAgB,MAAa,CAC3E,IAAMS,EAAMD,GAAW,IAAM,KAAK,IAClC,OAAON,EAAiBO,EAAKT,CAAa,CAC9C,EAEaU,GAAmB,CAACC,EAAiBX,EAAgB,MAAa,CAC3E,IAAMS,EAAME,GAAW,KAAK,GAAK,KACjC,OAAOT,EAAiBO,EAAKT,CAAa,CAC9C,EFnBO,IAAMY,EAAO,CAACC,EAAiBC,EAAiBC,EAAgB,MAAsB,CAEzF,IAAMC,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAEJ,EAAQ,OAAQI,IAC3BD,EAAO,KAAKE,EAAiBL,EAAQI,GAAKH,EAAQG,GAAIF,CAAa,CAAC,EAGxE,OAAOC,CACX,EAEaG,GAAQ,CAACN,EAAkBC,EAAkBC,EAAgB,MAC/DH,EAAKC,EAASC,EAASC,CAAa,EAGlCK,GAAQ,CAACP,EAAkBC,EAAkBC,EAAgB,MAC/DH,EAAKC,EAASC,EAASC,CAAa,EAKlCM,EAAO,CAACR,EAAiBC,EAAiBC,EAAgB,MAAsB,CAEzF,IAAMC,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAEJ,EAAQ,OAAQI,IAC3BD,EAAO,KAAKE,EAAiBL,EAAQI,GAAKH,EAAQG,GAAIF,CAAa,CAAC,EAGxE,OAAOC,CACX,EAEaM,GAAQ,CAACT,EAAkBC,EAAkBC,EAAgB,MAC/DM,EAAKR,EAASC,EAASC,CAAa,EAGlCQ,GAAQ,CAACV,EAAkBC,EAAkBC,EAAgB,MAC/DM,EAAKR,EAASC,EAASC,CAAa,EAKlCS,EAAa,CAACC,EAAWC,EAAgBX,EAAgB,MAAqB,CACvF,IAAMC,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAEQ,EAAE,OAAQR,IACrBD,EAAO,KAAKE,EAAiBO,EAAER,GAAKS,EAAQX,CAAa,CAAC,EAG9D,OAAOC,CACX,EAEaW,GAAc,CAACC,EAAaF,EAAgBX,EAAgB,MAC9DS,EAAWI,EAAIF,EAAQX,CAAa,EAGlCc,GAAc,CAACC,EAAaJ,EAAgBX,EAAgB,MAC9DS,EAAWM,EAAIJ,EAAQX,CAAa,EAKlCgB,EAAgB,CAACN,EAAWC,EAAgBX,EAAgB,MAAqB,CAC1F,GAAGW,IAAW,EACV,MAAM,IAAI,MAAM,yBAAyB,EAG7C,IAAMV,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAEQ,EAAE,OAAQR,IACrBD,EAAO,KAAKE,EAAiBO,EAAER,GAAKS,EAAQX,CAAa,CAAC,EAG9D,OAAOC,CACX,EAEagB,GAAiB,CAACJ,EAAaF,EAAgBX,EAAgB,MACjEgB,EAAcH,EAAIF,EAAQX,CAAa,EAGrCkB,GAAiB,CAACH,EAAaJ,EAAgBX,EAAgB,MACjEgB,EAAcD,EAAIJ,EAAQX,CAAa,EAKrCmB,EAAU,CAAClB,EAAgBD,EAAgB,MAAa,CACjE,IAAIoB,EAAM,EAEV,QAAQlB,EAAE,EAAGA,EAAED,EAAO,OAAQC,IAC1BkB,GAAOnB,EAAOC,GAAKD,EAAOC,GAG9B,OAAOC,EAAiB,KAAK,KAAKiB,CAAG,EAAGpB,CAAa,CACzD,EAEaqB,EAAW,CAACpB,EAAiBD,EAAgB,MAC/CmB,EAAQlB,EAAQD,CAAa,EAG3BsB,GAAW,CAACrB,EAAiBD,EAAgB,MAC/CmB,EAAQlB,EAAQD,CAAa,EAG3BuB,GAAc,CAACV,EAAaW,EAAmBxB,EAAgB,MAAsB,CAC9F,IAAMyB,EAAQC,EAAWb,CAAE,EAC3B,MAAO,CACHV,EAAiB,KAAK,IAAIsB,CAAK,EAAID,EAAWxB,CAAa,EAC3DG,EAAiB,KAAK,IAAIsB,CAAK,EAAID,EAAWxB,CAAa,CAC/D,CACJ,EAOa2B,EAAa,CAACjB,EAAWV,EAAgB,MAAsB,CACxE,IAAM4B,EAAST,EAAQT,CAAC,EAClBmB,EAAqB,CAAC,EAE5B,QAAQ3B,EAAE,EAAGA,EAAEQ,EAAE,OAAQR,IACrB2B,EAAW,KAAKD,IAAW,EAAI,EAAIzB,EAAiBO,EAAER,GAAK0B,EAAQ5B,CAAa,CAAC,EAGrF,OAAO6B,CACX,EAEaC,EAAc,CAACjB,EAAab,EAAgB,MAC9C2B,EAAWd,EAAIb,CAAa,EAG1B+B,EAAc,CAAChB,EAAaf,EAAgB,MAC9C2B,EAAWZ,EAAIf,CAAa,EAK1BgC,EAAc,CAAClC,EAAiBC,EAAiBC,EAAgB,MAAa,CACvF,IAAIoB,EAAM,EAEV,QAAQlB,EAAE,EAAGA,EAAEJ,EAAQ,OAAQI,IAC3BkB,GAAOtB,EAAQI,GAAKH,EAAQG,GAGhC,OAAOC,EAAiBiB,EAAKpB,CAAa,CAC9C,EAEaiC,GAAe,CAACnC,EAAkBC,EAAkBC,EAAgB,MACtEgC,EAAYlC,EAASC,EAASC,CAAa,EAGzCkC,GAAe,CAACpC,EAAkBC,EAAkBC,EAAgB,MACtEgC,EAAYlC,EAASC,EAASC,CAAa,EAKzCmC,GAAiB,CAACrC,EAAkBC,EAAkBC,EAAgB,MACxE,CACHG,EAAiBL,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,GAAIC,CAAa,EACjFG,EAAiBL,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,GAAIC,CAAa,EACjFG,EAAiBL,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,GAAIC,CAAa,CACrF,EAKSa,GAAK,CAACuB,EAAe,IACvB,CAACA,EAAcA,CAAY,EAGzBrB,GAAK,CAACqB,EAAe,IACvB,CAACA,EAAcA,EAAcA,CAAY,EAGvCC,EAAK,CAACC,EAAWF,EAAe,IAAc,CAEvD,GAAGE,EAAI,EACH,MAAM,IAAI,MAAM,kCAAkC,EAGtD,IAAMrC,EAAiB,CAAC,EACxB,QAAQC,EAAE,EAAGA,EAAEoC,EAAGpC,IACdD,EAAO,KAAKmC,CAAY,EAE5B,OAAOnC,CACX,EAIasC,EAAS,CAACzC,EAAiBC,IAA6B,CACjE,GAAGD,EAAQ,SAAWC,EAAQ,OAAQ,MAAO,GAE7C,QAAQG,EAAE,EAAGA,EAAEJ,EAAQ,OAAQI,IAC3B,GAAGJ,EAAQI,KAAOH,EAAQG,GAAI,MAAO,GAGzC,MAAO,EACX,EG7MA,IAAAsC,EAAA,GAAAC,EAAAD,EAAA,eAAAE,GAAA,cAAAC,GAAA,cAAAC,GAAA,eAAAC,EAAA,gBAAAC,GAAA,eAAAC,EAAA,kBAAAC,EAAA,mBAAAC,GAAA,cAAAC,EAAA,gBAAAC,GAAA,iBAAAC,GAAA,YAAAC,GAAA,eAAAC,GAAA,YAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,gBAAAC,GAAA,SAAAC,GAAA,eAAAC,GAAA,gBAAAC,GAAA,eAAAC,EAAA,kBAAAC,GAAA,mBAAAC,GAAA,cAAAC,EAAA,gBAAAC,GAAA,iBAAAC,GAAA,YAAAC,GAAA,gBAAAC,GAAA,gBAAAC,GAAA,gBAAAC,GAAA,YAAAC,GAAA,UAAAC,GAAA,UAAAC,GAAA,gBAAAC,GAAA,SAAAC,GAAA,cAAAC,EAAA,eAAAC,GAAA,eAAAC,GAAA,cAAAC,EAAA,iBAAAC,EAAA,kBAAAC,EAAA,WAAAC,GAAA,aAAAC,EAAA,WAAAC,EAAA,SAAAC,GAAA,eAAAC,EAAA,eAAAC,EAAA,SAAAC,GAAA,gBAAAC,GAAA,gBAAAC,GAAA,WAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,eAAAC,EAAA,aAAAC,GAAA,YAAAC,GAAA,cAAAC,GAAA,cAAAC,GAAA,cAAAC,GAAA,YAAAC,KAKO,IAAMC,EAAO,CAACC,EAAiBC,EAAiBC,EAAgB,MAAqB,CACxF,IAAMC,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAEJ,EAAQ,OAAQI,IAC3BD,EAAO,KAAKE,EAAKL,EAAQI,GAAIH,EAAQG,GAAIF,CAAa,CAAC,EAG3D,OAAOC,CACX,EAEaG,GAAQ,CAACN,EAAkBC,EAAkBC,EAAgB,MAC/DH,EAAKC,EAASC,EAASC,CAAa,EAGlCK,GAAQ,CAACP,EAAkBC,EAAkBC,EAAgB,MAC/DH,EAAKC,EAASC,EAASC,CAAa,EAKlCM,EAAO,CAACR,EAAiBC,EAAiBC,EAAgB,MAAqB,CACxF,IAAMC,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAEJ,EAAQ,OAAQI,IAC3BD,EAAO,KAAKM,EAAKT,EAAQI,GAAIH,EAAQG,GAAIF,CAAa,CAAC,EAG3D,OAAOC,CACX,EAEaO,GAAQ,CAACV,EAAkBC,EAAkBC,EAAgB,MAC/DM,EAAKR,EAASC,EAASC,CAAa,EAGlCS,GAAQ,CAACX,EAAkBC,EAAkBC,EAAgB,MAC/DM,EAAKR,EAASC,EAASC,CAAa,EAKlCU,EAAa,CAACC,EAAWC,EAAgBZ,EAAgB,MAAqB,CACvF,IAAMC,EAAiB,CAAC,EAExB,QAAUY,KAAKF,EACXV,EAAO,KAAKa,EAAWD,EAAGD,EAAQZ,CAAa,CAAC,EAGpD,OAAOC,CACX,EAEac,GAAc,CAACC,EAAaJ,EAAgBZ,EAAgB,MAC9DU,EAAWM,EAAIJ,EAAQZ,CAAa,EAGlCiB,GAAc,CAACC,EAAaN,EAAgBZ,EAAgB,MAC9DU,EAAWQ,EAAIN,EAAQZ,CAAa,EAKlCmB,EAAgB,CAACR,EAAWC,EAAgBZ,EAAgB,MAAqB,CAC1F,GAAGY,IAAW,EACV,MAAM,IAAI,MAAM,yBAAyB,EAG7C,IAAMX,EAAiB,CAAC,EAExB,QAAUY,KAAKF,EACXV,EAAO,KAAKmB,EAAcP,EAAGD,EAAQZ,CAAa,CAAC,EAGvD,OAAOC,CACX,EAEaoB,GAAiB,CAACL,EAAaJ,EAAgBZ,EAAgB,MACjEmB,EAAcH,EAAIJ,EAAQZ,CAAa,EAGrCsB,GAAiB,CAACJ,EAAaN,EAAgBZ,EAAgB,MACjEmB,EAAcD,EAAIN,EAAQZ,CAAa,EAMrCuB,EAAcZ,GAAsB,CAE7C,IAAMa,EAAeb,EAAE,OACvB,GAAGa,GAAgB,EAAG,OAAOb,EAE7B,IAAMc,EAAed,EAAE,GAAG,OAC1B,GAAGc,GAAgB,EAAG,OAAOd,EAE7B,IAAMV,EAAiB,CAAC,EACxB,QAAQC,EAAE,EAAGA,EAAEuB,EAAcvB,IACzBD,EAAO,KAAK,CAAC,CAAC,EAGlB,QAAQC,EAAE,EAAGA,EAAEsB,EAActB,IACzB,QAAQwB,EAAE,EAAGA,EAAED,EAAcC,IACzBzB,EAAOyB,GAAG,KAAKf,EAAET,GAAGwB,EAAE,EAI9B,OAAOzB,CACX,EAEa0B,GAAeX,GACjBO,EAAWP,CAAE,EAGXY,GAAeV,GACjBK,EAAWL,CAAE,EAKXW,EAAS,CAAClB,EAAWmB,EAAe,IAAc,CAE3D,GAAGnB,EAAE,QAAU,EAAG,MAAO,CAAC,EAE1B,IAAMoB,EAAc,CAAC,EAErB,QAAQ7B,EAAE,EAAGA,EAAES,EAAE,OAAQT,IAAI,CACzB,IAAM8B,EAAOrB,EAAET,GAAG,OAEZ+B,EAAiB,CAAC,EACxB,QAAQP,EAAE,EAAGA,EAAEM,EAAMN,IACjBO,EAAO,KAAKH,CAAY,EAG5BC,EAAI,KAAKE,CAAM,CACnB,CAEA,OAAOF,CACX,EAEaG,GAAU,CAAClB,EAAac,EAAe,IACzCD,EAAOb,EAAIc,CAAY,EAGrBK,GAAU,CAACjB,EAAaY,EAAe,IACzCD,EAAOX,EAAIY,CAAY,EAKrBM,GAAO,CAACN,EAAe,IACzB,CACH,CAACA,EAAcA,CAAY,EAC3B,CAACA,EAAcA,CAAY,CAC/B,EAGSO,GAAO,CAACP,EAAe,IACzB,CACH,CAACA,EAAcA,EAAcA,CAAY,EACzC,CAACA,EAAcA,EAAcA,CAAY,EACzC,CAACA,EAAcA,EAAcA,CAAY,CAC7C,EAGSQ,GAAO,CAACC,EAAWC,EAAWV,EAAe,IAAc,CACpE,GAAGS,GAAK,GAAKC,GAAK,EACd,MAAM,IAAI,MAAM,mCAAmC,EAGvD,IAAMvC,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAEqC,EAAGrC,IACdD,EAAO,KAAKwC,EAAGD,EAAGV,CAAY,CAAC,EAGnC,OAAO7B,CACX,EAEayC,GAAY,IACd,CACH,CAAC,EAAG,CAAC,EACL,CAAC,EAAG,CAAC,CACT,EAGSC,GAAY,IACd,CACH,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,EAAG,EAAG,CAAC,CACZ,EAOSC,GAAaL,GAAsB,CAC5C,GAAGA,EAAI,EACH,MAAM,IAAI,MAAM,kCAAkC,EAGtD,GAAGA,IAAM,EAAG,MAAO,CAAC,EAEpB,IAAMtC,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAEqC,EAAGrC,IAAI,CAClB,IAAM+B,EAAiB,CAAC,EACxB,QAAQP,EAAE,EAAGA,EAAEa,EAAGb,IACdO,EAAO,KAAK/B,IAAMwB,EAAI,EAAI,CAAC,EAE/BzB,EAAO,KAAKgC,CAAM,CACtB,CAEA,OAAOhC,CACX,EAIa4C,EAAalC,GAAsB,CAC5C,IAAMV,EAAiB,CAAC,EAExB,QAAQC,EAAE,EAAGA,EAAES,EAAE,OAAQT,IAAI,CACzB,IAAMW,EAAIF,EAAET,GACN+B,EAAiB,CAAC,EACxB,QAAQP,EAAE,EAAGA,EAAEb,EAAE,OAAQa,IACrBO,EAAO,KAAKpB,EAAEa,EAAE,EAEpBzB,EAAO,KAAKgC,CAAM,CACtB,CAEA,OAAOhC,CACX,EAEa6C,EAAc9B,GAChB6B,EAAU7B,CAAE,EAGV+B,EAAc7B,GAChB2B,EAAU3B,CAAE,EAKV8B,GAAa,CAACrC,EAAWsC,IAAyB,CAC3D,GAAGtC,EAAE,QAAU,EAAG,MAAO,CAAC,EAE1B,IAAMuC,EAAOL,EAAUlC,CAAC,EACxB,QAAQT,EAAE,EAAGA,EAAEgD,EAAK,OAAQhD,IACxBgD,EAAKhD,GAAG,KAAK+C,EAAI/C,EAAE,EAGvB,OAAOgD,CACX,EAEaC,GAAc,CAACxC,EAAWsC,IAAyB,CAC5D,GAAGtC,EAAE,QAAU,EAAG,MAAO,CAAC,EAE1B,IAAMuC,EAAOL,EAAUlC,CAAC,EACxB,QAAQT,EAAE,EAAGA,EAAEgD,EAAK,OAAQhD,IACxBgD,EAAKhD,GAAG,QAAQ+C,EAAI/C,EAAE,EAG1B,OAAOgD,CACX,EAEaE,GAAa,CAACzC,EAAW0C,IAAyB,CAC3D,IAAMH,EAAOL,EAAUlC,CAAC,EACxB,OAAAuC,EAAK,KAAKG,CAAG,EACNH,CACX,EAEaI,GAAc,CAACtC,EAAaqC,IAA2B,CAChE,IAAMH,EAAOJ,EAAW9B,CAAE,EAC1B,OAAAkC,EAAK,KAAKG,CAAG,EACNH,CACX,EAEaK,GAAc,CAACrC,EAAamC,IAA2B,CAChE,IAAMH,EAAOH,EAAW7B,CAAE,EAC1B,OAAAgC,EAAK,KAAKG,CAAG,EACNH,CACX,EAEaM,GAAc,CAAC7C,EAAW0C,IAAyB,CAC5D,IAAMH,EAAOL,EAAUlC,CAAC,EACxB,OAAAuC,EAAK,QAAQG,CAAG,EACTH,CACX,EAEaO,GAAe,CAACzC,EAAaqC,IAA2B,CACjE,IAAMH,EAAOJ,EAAW9B,CAAE,EAC1B,OAAAkC,EAAK,QAAQG,CAAG,EACTH,CACX,EAEaQ,GAAe,CAACxC,EAAamC,IAA2B,CACjE,IAAMH,EAAOH,EAAW7B,CAAE,EAC1B,OAAAgC,EAAK,QAAQG,CAAG,EACTH,CACX,EAUaS,GAAO,CAAC7D,EAAiBC,EAAiBC,EAAgB,MAAqB,CAExF,IAAMC,EAAiB,CAAC,EACxB,QAAQ,EAAE,EAAG,EAAEH,EAAQ,OAAQ,IAC3BG,EAAO,KAAK,CAAC,CAAC,EAGlB,IAAM2D,EAAarC,EAAWxB,CAAO,EAErC,GAAGE,EAAO,SAAW2D,EAAW,OAC5B,MAAM,IAAI,MAAM,gGAAgG,EAGpH,QAAQ,EAAE,EAAG,EAAE9D,EAAQ,OAAQ,IAAI,CAC/B,IAAM+D,EAAU/D,EAAQ,GAExB,QAAQ4B,EAAE,EAAGA,EAAEkC,EAAW,OAAQlC,IAAI,CAClC,IAAMoC,EAAUF,EAAWlC,GACrBqC,GAAUC,EAAYH,EAASC,EAAS9D,CAAa,EAC3DC,EAAO,GAAG,KAAK8D,EAAO,CAC1B,CACJ,CAEA,OAAO9D,CACX,EAEagE,EAAa,CAAChE,EAAgBgC,EAAgBjC,EAAgB,MAAqB,CAE5F,GAAGC,EAAO,OAAS,EAAG,MAAO,CAAC,EAE9B,GAAGA,EAAO,GAAG,SAAWgC,EAAO,OAC3B,MAAM,IAAI,MAAM,gFAAgF,EAGpG,IAAMF,EAAc,CAAC,EAErB,QAAQ7B,EAAE,EAAGA,EAAED,EAAO,OAAQC,IAC1B6B,EAAI7B,GAAK8D,EAAY/D,EAAOC,GAAI+B,EAAQjC,CAAa,EAGzD,OAAO+B,CACX,EAIamC,GAAS,CAACpE,EAAiBC,IAA6B,CACjE,GAAGD,EAAQ,SAAWC,EAAQ,OAAQ,MAAO,GAE7C,QAAQG,EAAE,EAAGA,EAAEJ,EAAQ,OAAQI,IAC3B,GAAG,CAACiE,EAAOrE,EAAQI,GAAIH,EAAQG,EAAE,EAAG,MAAO,GAG/C,MAAO,EACX,EAIakE,GAAcC,GAChB,CACL,CAAC,KAAK,IAAIA,CAAQ,EAAG,CAAC,KAAK,IAAIA,CAAQ,CAAC,EACxC,CAAC,KAAK,IAAIA,CAAQ,EAAG,KAAK,IAAIA,CAAQ,CAAC,CACzC,EAGSC,GAAW,CAACD,EAAkBpC,IAA6B,CACpE,IAAMsC,EAAaC,EAAYvC,CAAM,EACrC,OAAOgC,EAAWG,GAAWC,CAAQ,EAAGE,CAAU,CACtD,EAKaE,GAAeJ,GACjB,CACL,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,EAAG,KAAK,IAAIA,CAAQ,EAAG,CAAC,KAAK,IAAIA,CAAQ,CAAC,EAC3C,CAAC,EAAG,KAAK,IAAIA,CAAQ,EAAG,KAAK,IAAIA,CAAQ,CAAC,CAC5C,EAGSK,GAAY,CAACL,EAAkBpC,IAA6B,CACrE,IAAMsC,EAAaI,EAAY1C,CAAM,EACrC,OAAOgC,EAAWQ,GAAYJ,CAAQ,EAAGE,CAAU,CACvD,EAKaK,GAAeP,GACjB,CACH,CAAC,KAAK,IAAIA,CAAQ,EAAG,EAAG,KAAK,IAAIA,CAAQ,CAAC,EAC1C,CAAC,EAAG,EAAG,CAAC,EACR,CAAC,CAAC,KAAK,IAAIA,CAAQ,EAAG,EAAG,KAAK,IAAIA,CAAQ,CAAC,CAC/C,EAGSQ,GAAY,CAACR,EAAkBpC,IAA6B,CACrE,IAAMsC,EAAaI,EAAY1C,CAAM,EACrC,OAAOgC,EAAWW,GAAYP,CAAQ,EAAGE,CAAU,CACvD,EAKaO,GAAeT,GACjB,CACH,CAAC,KAAK,IAAIA,CAAQ,EAAG,CAAC,KAAK,IAAIA,CAAQ,EAAG,CAAC,EAC3C,CAAC,KAAK,IAAIA,CAAQ,EAAG,KAAK,IAAIA,CAAQ,EAAG,CAAC,EAC1C,CAAC,EAAG,EAAG,CAAC,CACZ,EAGSU,GAAY,CAACV,EAAkBpC,IAA6B,CACrE,IAAMsC,EAAaI,EAAY1C,CAAM,EACrC,OAAOgC,EAAWa,GAAYT,CAAQ,EAAGE,CAAU,CACvD,EAIaS,GAAWC,GACb,CACH,CAACA,EAAY,GAAI,CAAC,EAClB,CAAC,EAAGA,EAAY,EAAE,CACtB,EAGSC,GAAU,CAACD,EAAsBhD,IACnCgC,EAAWe,GAAQC,CAAW,EAAGhD,CAAM,EAGrCkD,GAAWF,GACb,CACH,CAACA,EAAY,GAAI,EAAG,CAAC,EACrB,CAAC,EAAGA,EAAY,GAAI,CAAC,EACrB,CAAC,EAAG,EAAGA,EAAY,EAAE,CACzB,EAGSG,GAAU,CAACH,EAAsBhD,IACnCgC,EAAWkB,GAAQF,CAAW,EAAGhD,CAAM,EAU5CoD,GAAe,CAAC1E,EAAW0C,EAAaJ,IAAgB,CAC1D,IAAMjB,EAAOrB,EAAE,OAEf,GAAGqB,GAAQ,EACP,MAAM,IAAI,MAAM,iCAAiC,EAGrD,GAAGA,IAASrB,EAAE,GAAG,OACb,MAAM,IAAI,MAAM,4BAA4B,EAGhD,IAAMV,EAAiB,CAAC,EAExB,QAAQ,EAAE,EAAG,EAAE+B,EAAM,IAAI,CACrB,GAAG,IAAMqB,EAAK,SAEd,IAAMpB,EAAiB,CAAC,EAExB,QAAQP,EAAE,EAAGA,EAAEM,EAAMN,IACdA,IAAMuB,GACThB,EAAO,KAAKtB,EAAE,GAAGe,EAAE,EAGvBzB,EAAO,KAAKgC,CAAM,CACtB,CAEA,OAAOhC,CACX,EAKaqF,EAAS,CAAC3E,EAAW0C,EAAaJ,IAAgB,CAC3D,IAAMjB,EAAOrB,EAAE,OAEf,GAAGqB,GAAQ,EACP,MAAM,IAAI,MAAM,iCAAiC,EAGrD,GAAGA,IAASrB,EAAE,GAAG,OACb,MAAM,IAAI,MAAM,4BAA4B,EAIhD,IAAMV,EAASoF,GAAa1E,EAAG0C,EAAKJ,CAAG,EAGvC,OAAOsC,EAAatF,CAAM,CAC9B,EAMasF,EAAgBtF,GAA2B,CACpD,IAAM+B,EAAO/B,EAAO,OACpB,GAAG+B,IAAS,EAAG,MAAO,GAEtB,GAAGA,IAAS/B,EAAO,GAAG,OAClB,MAAM,IAAI,MAAM,4BAA4B,EAGhD,GAAG+B,IAAS,EAAG,OAAO/B,EAAO,GAAG,GAChC,GAAG+B,IAAS,EAAG,OAAOwD,EAAcvF,CAAiB,EAErD,IAAIwF,EAAI,EAER,QAAQvF,EAAE,EAAGA,EAAE8B,EAAM9B,IAAI,CACrB,IAAMwF,EAAQJ,EAAOrF,EAAQ,EAAGC,CAAC,EAE7ByF,EAAQ1F,EAAO,GAAGC,GACnBA,EAAI,IAAM,IACTyF,EAAQ,CAACA,GAGbF,GAAKC,EAAQC,CACjB,CAEA,OAAOF,CACX,EAMaD,EAAiBxE,GAAwB,CAClD,GAAGA,EAAG,SAAWA,EAAG,GAAG,OACnB,MAAM,IAAI,MAAM,4BAA4B,EAGhD,OAAOA,EAAG,GAAG,GAAKA,EAAG,GAAG,GAAKA,EAAG,GAAG,GAAKA,EAAG,GAAG,EAClD,EAMa4E,GAAiB1E,GAAwB,CAClD,GAAGA,EAAG,SAAWA,EAAG,GAAG,OACnB,MAAM,IAAI,MAAM,4BAA4B,EAGhD,OAAOqE,EAAarE,CAAE,CAC1B,EAIa2E,EAAc7E,GAA8B,CACrD,GAAGA,EAAG,SAAWA,EAAG,GAAG,OACnB,MAAM,IAAI,MAAM,4BAA4B,EAGhD,MAAO,CACL,CAACA,EAAG,GAAG,GAAI,CAACA,EAAG,GAAG,EAAE,EACpB,CAAC,CAACA,EAAG,GAAG,GAAIA,EAAG,GAAG,EAAE,CACtB,CACJ,EAEa8E,GAAc5E,GAChB6E,EAAU7E,CAAE,EAMV6E,EAAapF,GAA2B,CAEjD,IAAMqB,EAAOrB,EAAE,OACf,GAAGqB,GAAQ,EAAG,OAAO,KAErB,GAAGA,IAASrB,EAAE,GAAG,OACb,MAAM,IAAI,MAAM,4BAA4B,EAGhD,GAAGqB,IAAS,EAAG,OAAOrB,EAEtB,GAAGqB,IAAS,EAAG,OAAO6D,EAAWlF,CAAY,EAG7C,IAAMqF,EAAoB,CAAC,EAE3B,QAAQ9F,EAAE,EAAGA,EAAE8B,EAAM9B,IAAI,CACrB,IAAM+B,EAAiB,CAAC,EACxB,QAAQP,EAAE,EAAGA,EAAEM,EAAMN,IAAI,CACrB,IAAMgE,EAAQJ,EAAO3E,EAAGT,EAAGwB,CAAC,EACtBuE,EAAO,KAAK,IAAI,GAAI/F,EAAIwB,CAAC,EAC/BO,EAAO,KAAKgE,EAAOP,CAAK,CAC5B,CACAM,EAAU,KAAK/D,CAAM,CACzB,CAGA,OAAOV,EAAWyE,CAAS,CAC/B,EAQaE,EAAY,CAAClF,EAAahB,EAAgB,MAA+B,CAClF,GAAGgB,EAAG,QAAU,EAAG,OAAO,KAE1B,GAAGA,EAAG,SAAWA,EAAG,GAAG,OACnB,MAAM,IAAI,MAAM,4BAA4B,EAGhD,IAAMyE,EAAID,EAAcxE,CAAE,EAC1B,GAAGyE,IAAM,EAAG,OAAO,KAEnB,IAAMU,EAAMN,EAAW7E,CAAE,EACzB,OAAGmF,IAAQ,KAAa,KAEjB9E,GAAe8E,EAAKV,EAAGzF,CAAa,CAC/C,EAEaoG,EAAY,CAAClF,EAAalB,EAAgB,MAC5CqG,EAASnF,EAAIlB,CAAa,EAGxBqG,EAAW,CAAC1F,EAAWX,EAAgB,MAA8B,CAC9E,IAAMgC,EAAOrB,EAAE,OACf,GAAGqB,GAAQ,EAAG,OAAO,KAErB,GAAGA,IAASrB,EAAE,GAAG,OACb,MAAM,IAAI,MAAM,4BAA4B,EAIhD,IAAM8E,EAAIF,EAAa5E,CAAC,EAGlBwF,EAAMJ,EAAUpF,CAAC,EACvB,OAAGwF,IAAQ,KAAa,KAEjBhF,EAAcgF,EAAKV,EAAGzF,CAAa,CAC9C,ECnpBA,IAAAsG,EAAA,GAAAC,EAAAD,EAAA,eAAAE,GAAA,qBAAAC,GAAA,iBAAAC,GAAA,2BAAAC,KAKO,IAAMC,GAAY,CAACC,EAAaC,EAAaC,EAAgB,MACzDC,EAAiB,KAAK,OAAO,GAAKF,EAAMD,GAAOA,EAAKE,CAAa,EAM/DE,GAAe,CAACJ,EAAaC,IAC/B,KAAK,MAAM,KAAK,OAAO,GAAKA,EAAMD,EAAM,GAAKA,CAAG,EAG9CK,GAAmB,IAAM,KAAK,OAAO,EAAI,GAGzCC,GAA0BC,GAAiB,CACpD,IAAMC,EAAcJ,GAAa,EAAGG,EAAM,OAAS,CAAC,EACpD,OAAOA,EAAMC,EACjB,ECtBA,IAAAC,EAAA,GAAAC,EAAAD,EAAA,kBAAAE,GAAA,oBAAAC,GAAA,aAAAC,GAAA,QAAAC,KAAO,IAAMA,GAAM,CAACC,EAAWC,KAClBD,EAAIC,EAAKA,GAAKA,EAOdL,GAAe,CAACM,EAAWC,EAAWC,EAAWC,EAAWC,KAC7DA,EAAID,IAAMH,EAAIC,IAAMC,EAAID,GAAKE,EAM5BR,GAAkB,CAACM,EAAWC,EAAWC,EAAWC,IACtD,KAAK,IAAIH,EAAGE,CAAC,GAAK,KAAK,IAAID,EAAGE,CAAC,EAI7BR,GAAYS,GACd,CAAC,MAAM,WAAWA,CAAK,CAAC,GAAK,SAASA,CAAK,ECrBtD,IAAAC,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,KAAO,IAAMA,GAAiB,CAACC,EAAqCC,IAA0B,CAA9F,IAAAC,EACI,GAA0BF,GAAU,KAAM,OAAOC,EACjD,IAAME,GAAMD,EAAA,OAAOF,CAAK,IAAZ,KAAAE,EAAiBD,EAC7B,OAAO,MAAME,CAAG,EAAIF,EAAgBE,CACxC,ECJA,IAAAC,EAAA,GAAAC,EAAAD,EAAA,wBAAAE,GAAA,2BAAAC,GAAA,uBAAAC,GAAA,2BAAAC,KAKO,IAAMF,GAAyB,CAClC,EACAG,EACAC,EACAC,IACW,CAEX,IAAMC,EAAQ,KAAK,IAAI,EAAI,EAAG,CAAC,EACzBC,GAAS,EAAI,GAAK,EAAI,EACtBC,EAAQ,EAAI,EAElB,MAAO,CACHF,EAAQH,EAAkB,GAAKI,EAAQH,EAAmB,GAAKI,EAAQH,EAAgB,GACvFC,EAAQH,EAAkB,GAAKI,EAAQH,EAAmB,GAAKI,EAAQH,EAAgB,EAC3F,CACJ,EAEaH,GAAyB,CAClC,EACAC,EACAC,EACAC,IACW,CAEX,IAAMC,EAAQ,KAAK,IAAI,EAAI,EAAG,CAAC,EACzBC,GAAS,EAAI,GAAK,EAAI,EACtBC,EAAQ,EAAI,EAElB,MAAO,CACHF,EAAQH,EAAkB,GAAKI,EAAQH,EAAmB,GAAKI,EAAQH,EAAgB,GACvFC,EAAQH,EAAkB,GAAKI,EAAQH,EAAmB,GAAKI,EAAQH,EAAgB,GACvFC,EAAQH,EAAkB,GAAKI,EAAQH,EAAmB,GAAKI,EAAQH,EAAgB,EAC3F,CACJ,EAKaN,GAAqB,CAC9B,EACAI,EACAM,EACAC,EACAL,IACW,CAEX,IAAMC,EAAQ,KAAK,IAAI,EAAI,EAAG,CAAC,EACzBC,EAAQ,KAAK,IAAI,EAAI,EAAG,CAAC,EAAI,EAAI,EACjCC,GAAS,EAAI,GAAK,EAAI,EAAI,EAC1BG,EAAQ,EAAI,EAAI,EAEtB,MAAO,CACHL,EAAQH,EAAkB,GAAKI,EAAQE,EAAoB,GAAKD,EAAQE,EAAoB,GAAKC,EAAQN,EAAgB,GACzHC,EAAQH,EAAkB,GAAKI,EAAQE,EAAoB,GAAKD,EAAQE,EAAoB,GAAKC,EAAQN,EAAgB,EAC7H,CACJ,EAEaJ,GAAqB,CAC9B,EACAE,EACAM,EACAC,EACAL,IACW,CAEX,IAAMC,EAAQ,KAAK,IAAI,EAAI,EAAG,CAAC,EACzBC,EAAQ,KAAK,IAAI,EAAI,EAAG,CAAC,EAAI,EAAI,EACjCC,GAAS,EAAI,GAAK,EAAI,EAAI,EAC1BG,EAAQ,EAAI,EAAI,EAEtB,MAAO,CACHL,EAAQH,EAAkB,GAAKI,EAAQE,EAAoB,GAAKD,EAAQE,EAAoB,GAAKC,EAAQN,EAAgB,GACzHC,EAAQH,EAAkB,GAAKI,EAAQE,EAAoB,GAAKD,EAAQE,EAAoB,GAAKC,EAAQN,EAAgB,GACzHC,EAAQH,EAAkB,GAAKI,EAAQE,EAAoB,GAAKD,EAAQE,EAAoB,GAAKC,EAAQN,EAAgB,EAC7H,CACJ,EChFA,IAAAO,EAAA,GAAAC,EAAAD,EAAA,qBAAAE,GAAA,oBAAAC,GAAA,oBAAAC,KAUO,IAAMC,GAAkB,CAACC,EAAoBC,EAAoBC,EAAgB,MAA8B,CAClH,IAAMC,EAA0B,CAC5B,CAACH,EAAU,GAAIA,EAAU,EAAE,EAC3B,CAACC,EAAU,GAAIA,EAAU,EAAE,CAC/B,EAEMG,EAAWC,EAAUF,CAAc,EACzC,GAAGC,IAAa,KAAM,OAAO,KAE7B,IAAME,EAA2B,CAC7BN,EAAU,GACVC,EAAU,EACd,EAEA,OAAOM,EAAWH,EAAUE,EAAiBJ,CAAa,CAC9D,EASaM,GAAkB,CAC3BR,EACAC,EACAQ,EACAP,EAAgB,MAA8B,CAC9C,IAAMC,EAA0B,CAC5B,CAACH,EAAU,GAAIA,EAAU,GAAIA,EAAU,EAAE,EACzC,CAACC,EAAU,GAAIA,EAAU,GAAIA,EAAU,EAAE,EACzC,CAACQ,EAAU,GAAIA,EAAU,GAAIA,EAAU,EAAE,CAC7C,EAEML,EAAWM,EAAUP,CAAc,EACzC,GAAGC,IAAa,KAAM,OAAO,KAE7B,IAAME,EAA2B,CAC7BN,EAAU,GACVC,EAAU,GACVQ,EAAU,EACd,EAEA,OAAOF,EAAWH,EAAUE,EAAiBJ,CAAa,CAC9D,EAKaS,GAAkB,CAACC,EAAmBV,EAAgB,MAA6B,CAC5F,GAAGU,EAAU,QAAU,EAAG,OAAO,KAEjC,IAAMT,EAAyB,CAAC,EAC1BU,EAAOD,EAAU,OAIvB,QAAQE,EAAE,EAAGA,EAAED,EAAMC,IAAI,CACrB,IAAMC,EAAiB,CAAC,EACxB,QAAQC,EAAE,EAAGA,EAAEH,EAAMG,IACjBD,EAAO,KAAKH,EAAUE,GAAGE,EAAE,EAE/Bb,EAAe,KAAKY,CAAM,CAC9B,CAEA,IAAMX,EAAWa,EAASd,CAAc,EACxC,GAAGC,IAAa,KAAM,OAAO,KAG7B,IAAME,EAA0B,CAAC,EACjC,QAAQQ,EAAE,EAAGA,EAAED,EAAMC,IAAI,CACrB,IAAMI,EAAMN,EAAUE,GACtBR,EAAgB,KAAKY,EAAIA,EAAI,OAAS,EAAE,CAC5C,CAEA,OAAOX,EAAWH,EAAUE,EAAiBJ,CAAa,CAC9D,EC7EA,IAAMiB,GAAMC,kBAAA,GACLC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GASP,OAAO,OAAS,OAAO,QAAUV",
  "names": ["vector_exports", "__export", "v2", "v2DivideScalar", "v2DotProduct", "v2Length", "v2MulScalar", "v2Normalize", "v2SetLength", "v2Sub", "v2Sum", "v3", "v3CrossProduct", "v3DivideScalar", "v3DotProduct", "v3Length", "v3MulScalar", "v3Normalize", "v3Sub", "v3Sum", "vDivideScalar", "vDotProduct", "vEqual", "vLength", "vMulScalar", "vN", "vNormalize", "vSub", "vSum", "format_exports", "__export", "setDecimalPlaces", "setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "angle_exports", "__export", "degreesToRadians", "getV2Angle", "radiansToDegrees", "setV2Angle", "getV2Angle", "v2", "decimalPlaces", "angle", "setDecimalPlaces", "setV2Angle", "newAngleRad", "length", "v2Length", "radiansToDegrees", "radians", "res", "degreesToRadians", "degrees", "vSum", "vector1", "vector2", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2Sum", "v3Sum", "vSub", "v2Sub", "v3Sub", "vMulScalar", "v", "scalar", "v2MulScalar", "v2", "v3MulScalar", "v3", "vDivideScalar", "v2DivideScalar", "v3DivideScalar", "vLength", "sum", "v2Length", "v3Length", "v2SetLength", "newLength", "angle", "getV2Angle", "vNormalize", "length", "unitVector", "v2Normalize", "v3Normalize", "vDotProduct", "v2DotProduct", "v3DotProduct", "v3CrossProduct", "defaultValue", "vN", "N", "vEqual", "matrix_exports", "__export", "identity2", "identity3", "identityN", "m2Adjugate", "m2AppendRow", "m2DeepCopy", "m2Determinant", "m2DivideScalar", "m2Inverse", "m2MulScalar", "m2PrependRow", "m2Reset", "m2Rotation", "m2Scale", "m2Sub", "m2Sum", "m2Transpose", "m2x2", "m3Adjugate", "m3AppendRow", "m3DeepCopy", "m3Determinant", "m3DivideScalar", "m3Inverse", "m3MulScalar", "m3PrependRow", "m3Reset", "m3RotationX", "m3RotationY", "m3RotationZ", "m3Scale", "m3Sub", "m3Sum", "m3Transpose", "m3x3", "mAdjugate", "mAppendCol", "mAppendRow", "mDeepCopy", "mDeterminant", "mDivideScalar", "mEqual", "mInverse", "mMinor", "mMul", "mMulScalar", "mMulVector", "mNxM", "mPrependCol", "mPrependRow", "mReset", "mSub", "mSum", "mTranspose", "v2Rotate", "v2Scale", "v3RotateX", "v3RotateY", "v3RotateZ", "v3Scale", "mSum", "matrix1", "matrix2", "decimalPlaces", "matrix", "i", "vSum", "m2Sum", "m3Sum", "mSub", "vSub", "m2Sub", "m3Sub", "mMulScalar", "m", "scalar", "v", "vMulScalar", "m2MulScalar", "m2", "m3MulScalar", "m3", "mDivideScalar", "vDivideScalar", "m2DivideScalar", "m3DivideScalar", "mTranspose", "vectorsCount", "vectorLength", "j", "m2Transpose", "m3Transpose", "mReset", "defaultValue", "res", "size", "vector", "m2Reset", "m3Reset", "m2x2", "m3x3", "mNxM", "N", "M", "vN", "identity2", "identity3", "identityN", "mDeepCopy", "m2DeepCopy", "m3DeepCopy", "mAppendCol", "col", "copy", "mPrependCol", "mAppendRow", "row", "m2AppendRow", "m3AppendRow", "mPrependRow", "m2PrependRow", "m3PrependRow", "mMul", "transposed", "vector1", "vector2", "product", "vDotProduct", "mMulVector", "mEqual", "vEqual", "m2Rotation", "angleRad", "v2Rotate", "unitVector", "v2Normalize", "m3RotationX", "v3RotateX", "v3Normalize", "m3RotationY", "v3RotateY", "m3RotationZ", "v3RotateZ", "m2Scale", "scaleVector", "v2Scale", "m3Scale", "v3Scale", "mMinorHelper", "mMinor", "mDeterminant", "m2Determinant", "d", "minor", "param", "m3Determinant", "m2Adjugate", "m3Adjugate", "mAdjugate", "cofactors", "sign", "m2Inverse", "adj", "m3Inverse", "mInverse", "random_exports", "__export", "getRandom", "getRandomBoolean", "getRandomInt", "getRandomItemFromArray", "getRandom", "min", "max", "decimalPlaces", "setDecimalPlaces", "getRandomInt", "getRandomBoolean", "getRandomItemFromArray", "array", "randomIndex", "other_exports", "__export", "convertRange", "doRangesOverlap", "isNumber", "mod", "n", "m", "x", "a", "b", "c", "d", "value", "convert_exports", "__export", "stringToNumber", "value", "defaultNumber", "_a", "res", "bezier_curve_exports", "__export", "v2CubicBezierCurve", "v2QuadraticBezierCurve", "v3CubicBezierCurve", "v3QuadraticBezierCurve", "startControlPoint", "centerControlPoint", "endControlPoint", "temp1", "temp2", "temp3", "center1ControlPoint", "center2ControlPoint", "temp4", "equations_exports", "__export", "equationSystem2", "equationSystem3", "equationSystemN", "equationSystem2", "equation1", "equation2", "decimalPlaces", "equationParams", "inversed", "m2Inverse", "equationResults", "mMulVector", "equationSystem3", "equation3", "m3Inverse", "equationSystemN", "equations", "size", "i", "vector", "j", "mInverse", "row", "api", "__spreadValues", "vector_exports", "matrix_exports", "format_exports", "angle_exports", "random_exports", "other_exports", "convert_exports", "bezier_curve_exports", "equations_exports"]
}
