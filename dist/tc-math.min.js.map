{
  "version": 3,
  "sources": ["../src/format.ts", "../src/vector.ts", "../src/angle.ts", "../src/random.ts", "../src/other.ts", "../src/convert.ts", "../src/index.ts"],
  "sourcesContent": ["export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { IVector2, IVector3 } from './interfaces';\nimport { setDecimalPlaces } from './format';\n\nexport const v2Sum = (...vectors: IVector2[]) : IVector2 => {\n\n    const res = { x: 0, y: 0 };\n\n    for(const vector of vectors){\n        res.x += vector.x;\n        res.y += vector.y;\n    }\n\n    return res;\n};\n\nexport const v3Sum = (...vectors: IVector3[]) : IVector3 => {\n\n    const res = {\n        x: 0,\n        y: 0,\n        z: 0,\n    };\n\n    for(const vector of vectors){\n        res.x += vector.x;\n        res.y += vector.y;\n        res.z += vector.z;\n    }\n\n    return res;\n};\n\nexport const v2Sub = (...vectors: IVector2[]) : IVector2 => {\n\n    const res = vectors[0];\n\n    for(let i=1; i<vectors.length; i++){\n        res.x -= vectors[i].x;\n        res.y -= vectors[i].y;\n    }\n\n    return res;\n};\n\nexport const v3Sub = (...vectors: IVector3[]) : IVector3 => {\n\n    const res = vectors[0];\n\n    for(let i=1; i<vectors.length; i++){\n        res.x -= vectors[i].x;\n        res.y -= vectors[i].y;\n        res.z -= vectors[i].z;\n    }\n\n    return res;\n};\n\nexport const v2Length = (vector: IVector2, decimalPlaces = Infinity) => {\n    const len = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    return setDecimalPlaces(len, decimalPlaces);\n};\n\nexport const v3Length = (vector: IVector3, decimalPlaces = Infinity) => {\n    const len = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n    return setDecimalPlaces(len, decimalPlaces);\n};", "import { IVector2 } from './interfaces';\nimport { setDecimalPlaces } from './format';\nimport { v2Length } from './vector';\n\nexport const getV2Angle = (v2: IVector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2.y, v2.x);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: IVector2, newAngleRad: number, decimalPlaces = Infinity): IVector2 => {\n    const length = v2Length(v2);\n    return {\n        x: setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        y: setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    };\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import * as vector from './vector';\nimport * as format from './format';\nimport * as angle from './angle';\nimport * as random from './random';\nimport * as other from './other';\nimport * as convert from './convert';\n\ndeclare global {\n    interface Window {\n        TCMath: {\n            v2Sum: typeof vector.v2Sum;\n            v3Sum: typeof vector.v3Sum;\n            v2Sub: typeof vector.v2Sub;\n            v3Sub: typeof vector.v3Sub;\n            v2Length: typeof vector.v2Length;\n            v3Length: typeof vector.v3Length;\n\n            getV2Angle: typeof angle.getV2Angle;\n            setV2Angle: typeof angle.setV2Angle;\n            radiansToDegrees: typeof angle.radiansToDegrees;\n            degreesToRadians: typeof angle.degreesToRadians;\n\n            setDecimalPlaces: typeof format.setDecimalPlaces;\n\n            getRandom: typeof random.getRandom;\n            getRandomInt: typeof random.getRandomInt;\n            getRandomBoolean: typeof random.getRandomBoolean;\n            getRandomItemFromArray: typeof random.getRandomItemFromArray;\n\n            mod: typeof other.mod;\n            convertRange: typeof other.convertRange;\n            doRangesOverlap: typeof other.doRangesOverlap;\n\n            stringToNumber: typeof convert.stringToNumber;\n        }\n    }\n}\n\nwindow.TCMath = window.TCMath || {\n    v2Sum: vector.v2Sum,\n    v3Sum: vector.v3Sum,\n    v2Sub: vector.v2Sub,\n    v3Sub: vector.v3Sub,\n    v2Length: vector.v2Length,\n    v3Length: vector.v3Length,\n\n    getV2Angle: angle.getV2Angle,\n    setV2Angle: angle.setV2Angle,\n    radiansToDegrees: angle.radiansToDegrees,\n    degreesToRadians: angle.degreesToRadians,\n\n    setDecimalPlaces: format.setDecimalPlaces,\n\n    getRandom: random.getRandom,\n    getRandomInt: random.getRandomInt,\n    getRandomBoolean: random.getRandomBoolean,\n    getRandomItemFromArray: random.getRandomItemFromArray,\n\n    mod: other.mod,\n    convertRange: other.convertRange,\n    doRangesOverlap: other.doRangesOverlap,\n\n    stringToNumber: convert.stringToNumber,\n};"],
  "mappings": "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",
  "names": ["setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "v2Sum", "vectors", "res", "vector", "v3Sum", "v2Sub", "i", "v3Sub", "v2Length", "decimalPlaces", "len", "setDecimalPlaces", "v3Length", "getV2Angle", "v2", "decimalPlaces", "angle", "setDecimalPlaces", "setV2Angle", "newAngleRad", "length", "v2Length", "radiansToDegrees", "radians", "res", "degreesToRadians", "degrees", "getRandom", "min", "max", "decimalPlaces", "setDecimalPlaces", "getRandomInt", "getRandomBoolean", "getRandomItemFromArray", "array", "randomIndex", "mod", "n", "m", "convertRange", "x", "a", "b", "c", "d", "doRangesOverlap", "stringToNumber", "value", "defaultNumber", "_a", "res", "v2Sum", "v3Sum", "v2Sub", "v3Sub", "v2Length", "v3Length", "getV2Angle", "setV2Angle", "radiansToDegrees", "degreesToRadians", "setDecimalPlaces", "getRandom", "getRandomInt", "getRandomBoolean", "getRandomItemFromArray", "mod", "convertRange", "doRangesOverlap", "stringToNumber"]
}
