{
  "version": 3,
  "sources": ["../src/format.ts", "../src/vector.ts", "../src/index.ts"],
  "sourcesContent": ["export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { IVector2, IVector3 } from './interfaces';\nimport { setDecimalPlaces } from './format';\n\nexport const v2Sum = (...vectors: IVector2[]) : IVector2 => {\n\n    const res = {\n        x: 0,\n        y: 0,\n    }\n\n    for(const vector of vectors){\n        res.x += vector.x;\n        res.y += vector.y;\n    }\n\n    return res;\n};\n\nexport const v3Sum = (...vectors: IVector3[]) : IVector3 => {\n\n    const res = {\n        x: 0,\n        y: 0,\n        z: 0,\n    }\n\n    for(const vector of vectors){\n        res.x += vector.x;\n        res.y += vector.y;\n        res.z += vector.z;\n    }\n\n    return res;\n};\n\nexport const v2Length = (vector: IVector2, decimalPlaces = Infinity) => {\n    const len = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    return setDecimalPlaces(len, decimalPlaces);\n};\n\nexport const v3Length = (vector: IVector3, decimalPlaces = Infinity) => {\n    const len = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n    return setDecimalPlaces(len, decimalPlaces);\n};", "import { v2Sum, v3Sum, v2Length, v3Length } from './vector';\n\ndeclare global {\n    interface Window {\n        TCMath: {\n            v2Sum: typeof v2Sum;\n            v3Sum: typeof v3Sum;\n            v2Length: typeof v2Length;\n            v3Length: typeof v3Length;\n        }\n    }\n}\n\nwindow.TCMath = window.TCMath || {\n    v2Sum,\n    v3Sum,\n    v2Length,\n    v3Length,\n};"],
  "mappings": ";;;;;;;qBAAO,IAAMA,EAAmB,CAACC,EAAaC,EAAoC,MAAa,CAC3F,GAAGA,IAAkB,IAAU,OAAOD,EAEtC,IAAME,EAAcC,EAAA,GAAMF,GAC1B,OAAO,KAAK,MAAMD,EAAME,CAAW,EAAIA,CAC3C,ECFO,IAAME,EAAQ,IAAIC,IAAmC,CAExD,IAAMC,EAAM,CACR,EAAG,EACH,EAAG,CACP,EAEA,QAAUC,KAAUF,EAChBC,EAAI,GAAKC,EAAO,EAChBD,EAAI,GAAKC,EAAO,EAGpB,OAAOD,CACX,EAEaE,EAAQ,IAAIH,IAAmC,CAExD,IAAMC,EAAM,CACR,EAAG,EACH,EAAG,EACH,EAAG,CACP,EAEA,QAAUC,KAAUF,EAChBC,EAAI,GAAKC,EAAO,EAChBD,EAAI,GAAKC,EAAO,EAChBD,EAAI,GAAKC,EAAO,EAGpB,OAAOD,CACX,EAEaG,EAAW,CAACF,EAAkBG,EAAgB,MAAa,CACpE,IAAMC,EAAM,KAAK,KAAKJ,EAAO,EAAIA,EAAO,EAAIA,EAAO,EAAIA,EAAO,CAAC,EAC/D,OAAOK,EAAiBD,EAAKD,CAAa,CAC9C,EAEaG,EAAW,CAACN,EAAkBG,EAAgB,MAAa,CACpE,IAAMC,EAAM,KAAK,KAAKJ,EAAO,EAAIA,EAAO,EAAIA,EAAO,EAAIA,EAAO,EAAIA,EAAO,EAAIA,EAAO,CAAC,EACrF,OAAOK,EAAiBD,EAAKD,CAAa,CAC9C,EC9BA,OAAO,OAAS,OAAO,QAAU,CAC7B,MAAAI,EACA,MAAAC,EACA,SAAAC,EACA,SAAAC,CACJ",
  "names": ["setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "v2Sum", "vectors", "res", "vector", "v3Sum", "v2Length", "decimalPlaces", "len", "setDecimalPlaces", "v3Length", "v2Sum", "v3Sum", "v2Length", "v3Length"]
}
