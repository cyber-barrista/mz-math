{
  "version": 3,
  "sources": ["../src/format.ts", "../src/angle.ts", "../src/vector.ts", "../src/matrix.ts", "../src/random.ts", "../src/other.ts", "../src/convert.ts", "../src/bezier-curve.ts", "../src/index.ts"],
  "sourcesContent": ["export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector2 } from './types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length } from './vector';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};", "import { Vector2, Vector3 } from './types';\nimport { setDecimalPlaces } from './format';\nimport { getV2Angle } from './angle';\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return [\n        setDecimalPlaces(vector1[0] + vector2[0], decimalPlaces),\n        setDecimalPlaces(vector1[1] + vector2[1], decimalPlaces),\n    ];\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return [\n        setDecimalPlaces(vector1[0] + vector2[0], decimalPlaces),\n        setDecimalPlaces(vector1[1] + vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] + vector2[2], decimalPlaces),\n    ];\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return [\n        setDecimalPlaces(vector1[0] - vector2[0], decimalPlaces),\n        setDecimalPlaces(vector1[1] - vector2[1], decimalPlaces),\n    ];\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return [\n        setDecimalPlaces(vector1[0] - vector2[0], decimalPlaces),\n        setDecimalPlaces(vector1[1] - vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] - vector2[2], decimalPlaces),\n    ];\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return [\n        setDecimalPlaces(v2[0] * scalar, decimalPlaces),\n        setDecimalPlaces(v2[1] * scalar, decimalPlaces),\n    ];\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(v3[0] * scalar, decimalPlaces),\n        setDecimalPlaces(v3[1] * scalar, decimalPlaces),\n        setDecimalPlaces(v3[2] * scalar, decimalPlaces),\n    ];\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    const len = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);\n    return setDecimalPlaces(len, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    const len = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1] + vector[2] * vector[2]);\n    return setDecimalPlaces(len, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    const length = v2Length(v2);\n\n    return [\n        length === 0 ? 0 : setDecimalPlaces(v2[0] / length, decimalPlaces),\n        length === 0 ? 0 : setDecimalPlaces(v2[1] / length, decimalPlaces),\n    ];\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    const length = v3Length(v3);\n\n    return [\n        length === 0 ? 0 : setDecimalPlaces(v3[0] / length, decimalPlaces),\n        length === 0 ? 0 : setDecimalPlaces(v3[1] / length, decimalPlaces),\n        length === 0 ? 0 : setDecimalPlaces(v3[2] / length, decimalPlaces),\n    ];\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(vector1[0] * vector2[0] + vector1[1] * vector2[1], decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(\n        vector1[0] * vector2[0] +\n              vector1[1] * vector2[1] +\n              vector1[2] * vector2[2],\n        decimalPlaces\n    );\n};\n\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};", "import { Matrix2, Matrix3 } from './types';\nimport { v2MulScalar, v3MulScalar } from './vector';\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    const res: Matrix2 = [];\n\n    for(const v2 of m2){\n        res.push(v2MulScalar(v2, scalar, decimalPlaces));\n    }\n\n    return res;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    const res: Matrix3 = [];\n\n    for(const v3 of m3){\n        res.push(v3MulScalar(v3, scalar, decimalPlaces));\n    }\n\n    return res;\n};\n\n", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { Vector2, Vector3 } from './types';\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1],\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1],\n        temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2],\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1],\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1],\n        temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2],\n    ];\n};\n", "import * as vector from './vector';\nimport * as matrix from './matrix';\nimport * as format from './format';\nimport * as angle from './angle';\nimport * as random from './random';\nimport * as other from './other';\nimport * as convert from './convert';\nimport * as bezierCurve from './bezier-curve';\n\ndeclare global {\n    interface Window {\n        TCMath: {\n            v2Sum: typeof vector.v2Sum;\n            v3Sum: typeof vector.v3Sum;\n            v2Sub: typeof vector.v2Sub;\n            v3Sub: typeof vector.v3Sub;\n            v2MulScalar: typeof vector.v2MulScalar;\n            v3MulScalar: typeof vector.v3MulScalar;\n            v2Length: typeof vector.v2Length;\n            v3Length: typeof vector.v3Length;\n            v2SetLength: typeof vector.v2SetLength;\n            v2Normalize: typeof vector.v2Normalize;\n            v3Normalize: typeof vector.v3Normalize;\n            v2DotProduct: typeof vector.v2DotProduct;\n            v3DotProduct: typeof vector.v3DotProduct;\n            v3CrossProduct: typeof vector.v3CrossProduct;\n\n            m2MulScalar: typeof matrix.m2MulScalar;\n            m3MulScalar: typeof matrix.m3MulScalar;\n\n            getV2Angle: typeof angle.getV2Angle;\n            setV2Angle: typeof angle.setV2Angle;\n            radiansToDegrees: typeof angle.radiansToDegrees;\n            degreesToRadians: typeof angle.degreesToRadians;\n\n            setDecimalPlaces: typeof format.setDecimalPlaces;\n\n            getRandom: typeof random.getRandom;\n            getRandomInt: typeof random.getRandomInt;\n            getRandomBoolean: typeof random.getRandomBoolean;\n            getRandomItemFromArray: typeof random.getRandomItemFromArray;\n\n            mod: typeof other.mod;\n            convertRange: typeof other.convertRange;\n            doRangesOverlap: typeof other.doRangesOverlap;\n            isNumber: typeof other.isNumber;\n\n            stringToNumber: typeof convert.stringToNumber;\n\n            v2QuadraticBezierCurve: typeof bezierCurve.v2QuadraticBezierCurve;\n            v3QuadraticBezierCurve: typeof bezierCurve.v3QuadraticBezierCurve;\n            v2CubicBezierCurve: typeof bezierCurve.v2CubicBezierCurve;\n            v3CubicBezierCurve: typeof bezierCurve.v3CubicBezierCurve;\n        }\n    }\n}\n\nwindow.TCMath = window.TCMath || {\n    v2Sum: vector.v2Sum,\n    v3Sum: vector.v3Sum,\n    v2Sub: vector.v2Sub,\n    v3Sub: vector.v3Sub,\n    v2MulScalar: vector.v2MulScalar,\n    v3MulScalar: vector.v3MulScalar,\n    v2Length: vector.v2Length,\n    v3Length: vector.v3Length,\n    v2SetLength: vector.v2SetLength,\n    v2Normalize: vector.v2Normalize,\n    v3Normalize: vector.v3Normalize,\n    v2DotProduct: vector.v2DotProduct,\n    v3DotProduct: vector.v3DotProduct,\n    v3CrossProduct: vector.v3CrossProduct,\n\n    m2MulScalar: matrix.m2MulScalar,\n    m3MulScalar: matrix.m3MulScalar,\n\n    getV2Angle: angle.getV2Angle,\n    setV2Angle: angle.setV2Angle,\n    radiansToDegrees: angle.radiansToDegrees,\n    degreesToRadians: angle.degreesToRadians,\n\n    setDecimalPlaces: format.setDecimalPlaces,\n\n    getRandom: random.getRandom,\n    getRandomInt: random.getRandomInt,\n    getRandomBoolean: random.getRandomBoolean,\n    getRandomItemFromArray: random.getRandomItemFromArray,\n\n    mod: other.mod,\n    convertRange: other.convertRange,\n    doRangesOverlap: other.doRangesOverlap,\n    isNumber: other.isNumber,\n\n    stringToNumber: convert.stringToNumber,\n\n    v2QuadraticBezierCurve: bezierCurve.v2QuadraticBezierCurve,\n    v3QuadraticBezierCurve: bezierCurve.v3QuadraticBezierCurve,\n    v2CubicBezierCurve: bezierCurve.v2CubicBezierCurve,\n    v3CubicBezierCurve: bezierCurve.v3CubicBezierCurve,\n};"],
  "mappings": "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",
  "names": ["setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "getV2Angle", "v2", "decimalPlaces", "angle", "setDecimalPlaces", "setV2Angle", "newAngleRad", "length", "v2Length", "radiansToDegrees", "radians", "res", "degreesToRadians", "degrees", "v2Sum", "vector1", "vector2", "decimalPlaces", "setDecimalPlaces", "v3Sum", "v2Sub", "v3Sub", "v2MulScalar", "v2", "scalar", "v3MulScalar", "v3", "v2Length", "vector", "len", "v3Length", "v2SetLength", "newLength", "angle", "getV2Angle", "v2Normalize", "length", "v3Normalize", "v2DotProduct", "v3DotProduct", "v3CrossProduct", "m2MulScalar", "m2", "scalar", "decimalPlaces", "res", "v2", "v2MulScalar", "m3MulScalar", "m3", "v3", "v3MulScalar", "getRandom", "min", "max", "decimalPlaces", "setDecimalPlaces", "getRandomInt", "getRandomBoolean", "getRandomItemFromArray", "array", "randomIndex", "mod", "n", "m", "convertRange", "x", "a", "b", "c", "d", "doRangesOverlap", "isNumber", "value", "stringToNumber", "value", "defaultNumber", "_a", "res", "v2QuadraticBezierCurve", "t", "startControlPoint", "centerControlPoint", "endControlPoint", "temp1", "temp2", "temp3", "v3QuadraticBezierCurve", "v2CubicBezierCurve", "center1ControlPoint", "center2ControlPoint", "temp4", "v3CubicBezierCurve", "v2Sum", "v3Sum", "v2Sub", "v3Sub", "v2MulScalar", "v3MulScalar", "v2Length", "v3Length", "v2SetLength", "v2Normalize", "v3Normalize", "v2DotProduct", "v3DotProduct", "v3CrossProduct", "m2MulScalar", "m3MulScalar", "getV2Angle", "setV2Angle", "radiansToDegrees", "degreesToRadians", "setDecimalPlaces", "getRandom", "getRandomInt", "getRandomBoolean", "getRandomItemFromArray", "mod", "convertRange", "doRangesOverlap", "isNumber", "stringToNumber", "v2QuadraticBezierCurve", "v3QuadraticBezierCurve", "v2CubicBezierCurve", "v3CubicBezierCurve"]
}
