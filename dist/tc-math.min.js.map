{
  "version": 3,
  "sources": ["../src/format.ts", "../src/angle.ts", "../src/vector.ts", "../src/matrix.ts", "../src/random.ts", "../src/other.ts", "../src/convert.ts", "../src/bezier-curve.ts", "../src/index.ts"],
  "sourcesContent": ["export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector2 } from './types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length } from './vector';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};", "import { Vector, Vector2, Vector3 } from './types';\nimport { setDecimalPlaces } from './format';\nimport { getV2Angle } from './angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ------------ NORMALIZE ------------------------\n\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};", "import { Matrix2, Matrix3, Matrix, Vector } from './types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// --------------- MULTIPLICATION ----------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { Vector2, Vector3 } from './types';\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1],\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1],\n        temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2],\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1],\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0],\n        temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1],\n        temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2],\n    ];\n};\n", "import * as vector from './vector';\nimport * as matrix from './matrix';\nimport * as format from './format';\nimport * as angle from './angle';\nimport * as random from './random';\nimport * as other from './other';\nimport * as convert from './convert';\nimport * as bezierCurve from './bezier-curve';\n\ndeclare global {\n    interface Window {\n        TCMath: {\n            v2: typeof vector.v2;\n            v3: typeof vector.v3;\n            vN: typeof vector.vN;\n            m2x2: typeof matrix.m2x2;\n            m3x3: typeof matrix.m3x3;\n            mNxM: typeof matrix.mNxM;\n            identity2: typeof matrix.identity2;\n            identity3: typeof matrix.identity3;\n            identityN: typeof matrix.identityN;\n\n            vEqual: typeof vector.vEqual;\n            mEqual: typeof matrix.mEqual;\n\n            vSum: typeof vector.vSum;\n            v2Sum: typeof vector.v2Sum;\n            v3Sum: typeof vector.v3Sum;\n\n            vSub: typeof vector.vSub;\n            v2Sub: typeof vector.v2Sub;\n            v3Sub: typeof vector.v3Sub;\n\n            vMulScalar: typeof vector.vMulScalar,\n            v2MulScalar: typeof vector.v2MulScalar;\n            v3MulScalar: typeof vector.v3MulScalar;\n\n            vLength: typeof vector.vLength;\n            v2Length: typeof vector.v2Length;\n            v3Length: typeof vector.v3Length;\n            v2SetLength: typeof vector.v2SetLength;\n\n            vNormalize: typeof vector.vNormalize,\n            v2Normalize: typeof vector.v2Normalize;\n            v3Normalize: typeof vector.v3Normalize;\n\n            vDotProduct: typeof vector.vDotProduct;\n            v2DotProduct: typeof vector.v2DotProduct;\n            v3DotProduct: typeof vector.v3DotProduct;\n            v3CrossProduct: typeof vector.v3CrossProduct;\n\n            mSum: typeof matrix.mSum;\n            m2Sum: typeof matrix.m2Sum;\n            m3Sum: typeof matrix.m3Sum;\n\n            mSub: typeof matrix.mSub;\n            m2Sub: typeof matrix.m2Sub;\n            m3Sub: typeof matrix.m3Sub;\n\n            mMulScalar: typeof matrix.mMulScalar;\n            m2MulScalar: typeof matrix.m2MulScalar;\n            m3MulScalar: typeof matrix.m3MulScalar;\n\n            mTranspose: typeof matrix.mTranspose;\n            m2Transpose: typeof matrix.m2Transpose;\n            m3Transpose: typeof matrix.m3Transpose;\n\n            mMul: typeof matrix.mMul;\n            mMulVector: typeof matrix.mMulVector;\n\n            mReset: typeof matrix.mReset;\n            m2Reset: typeof matrix.m2Reset;\n            m3Reset: typeof matrix.m3Reset;\n\n            getV2Angle: typeof angle.getV2Angle;\n            setV2Angle: typeof angle.setV2Angle;\n            radiansToDegrees: typeof angle.radiansToDegrees;\n            degreesToRadians: typeof angle.degreesToRadians;\n\n            setDecimalPlaces: typeof format.setDecimalPlaces;\n\n            getRandom: typeof random.getRandom;\n            getRandomInt: typeof random.getRandomInt;\n            getRandomBoolean: typeof random.getRandomBoolean;\n            getRandomItemFromArray: typeof random.getRandomItemFromArray;\n\n            mod: typeof other.mod;\n            convertRange: typeof other.convertRange;\n            doRangesOverlap: typeof other.doRangesOverlap;\n            isNumber: typeof other.isNumber;\n\n            stringToNumber: typeof convert.stringToNumber;\n\n            v2QuadraticBezierCurve: typeof bezierCurve.v2QuadraticBezierCurve;\n            v3QuadraticBezierCurve: typeof bezierCurve.v3QuadraticBezierCurve;\n            v2CubicBezierCurve: typeof bezierCurve.v2CubicBezierCurve;\n            v3CubicBezierCurve: typeof bezierCurve.v3CubicBezierCurve;\n        }\n    }\n}\n\nwindow.TCMath = window.TCMath || {\n    v2: vector.v2,\n    v3: vector.v3,\n    vN: vector.vN,\n    m2x2: matrix.m2x2,\n    m3x3: matrix.m3x3,\n    mNxM: matrix.mNxM,\n    identity2: matrix.identity2,\n    identity3: matrix.identity3,\n    identityN: matrix.identityN,\n\n    vEqual: vector.vEqual,\n    mEqual: matrix.mEqual,\n\n    vSum: vector.vSum,\n    v2Sum: vector.v2Sum,\n    v3Sum: vector.v3Sum,\n\n    vSub: vector.vSub,\n    v2Sub: vector.v2Sub,\n    v3Sub: vector.v3Sub,\n\n    vMulScalar: vector.vMulScalar,\n    v2MulScalar: vector.v2MulScalar,\n    v3MulScalar: vector.v3MulScalar,\n\n    vLength: vector.vLength,\n    v2Length: vector.v2Length,\n    v3Length: vector.v3Length,\n    v2SetLength: vector.v2SetLength,\n\n    vNormalize: vector.vNormalize,\n    v2Normalize: vector.v2Normalize,\n    v3Normalize: vector.v3Normalize,\n\n    vDotProduct: vector.vDotProduct,\n    v2DotProduct: vector.v2DotProduct,\n    v3DotProduct: vector.v3DotProduct,\n    v3CrossProduct: vector.v3CrossProduct,\n\n    mSum: matrix.mSum,\n    m2Sum: matrix.m2Sum,\n    m3Sum: matrix.m3Sum,\n\n    mSub: matrix.mSub,\n    m2Sub: matrix.m2Sub,\n    m3Sub: matrix.m3Sub,\n\n    mMulScalar: matrix.mMulScalar,\n    m2MulScalar: matrix.m2MulScalar,\n    m3MulScalar: matrix.m3MulScalar,\n\n    mTranspose: matrix.mTranspose,\n    m2Transpose: matrix.m2Transpose,\n    m3Transpose: matrix.m3Transpose,\n\n    mMul: matrix.mMul,\n    mMulVector: matrix.mMulVector,\n\n    mReset: matrix.mReset,\n    m2Reset: matrix.m2Reset,\n    m3Reset: matrix.m3Reset,\n\n    getV2Angle: angle.getV2Angle,\n    setV2Angle: angle.setV2Angle,\n    radiansToDegrees: angle.radiansToDegrees,\n    degreesToRadians: angle.degreesToRadians,\n\n    setDecimalPlaces: format.setDecimalPlaces,\n\n    getRandom: random.getRandom,\n    getRandomInt: random.getRandomInt,\n    getRandomBoolean: random.getRandomBoolean,\n    getRandomItemFromArray: random.getRandomItemFromArray,\n\n    mod: other.mod,\n    convertRange: other.convertRange,\n    doRangesOverlap: other.doRangesOverlap,\n    isNumber: other.isNumber,\n\n    stringToNumber: convert.stringToNumber,\n\n    v2QuadraticBezierCurve: bezierCurve.v2QuadraticBezierCurve,\n    v3QuadraticBezierCurve: bezierCurve.v3QuadraticBezierCurve,\n    v2CubicBezierCurve: bezierCurve.v2CubicBezierCurve,\n    v3CubicBezierCurve: bezierCurve.v3CubicBezierCurve,\n};"],
  "mappings": "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",
  "names": ["setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "getV2Angle", "v2", "decimalPlaces", "angle", "setDecimalPlaces", "setV2Angle", "newAngleRad", "length", "v2Length", "radiansToDegrees", "radians", "res", "degreesToRadians", "degrees", "vSum", "vector1", "vector2", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2Sum", "v3Sum", "vSub", "v2Sub", "v3Sub", "vMulScalar", "v", "scalar", "v2MulScalar", "v2", "v3MulScalar", "v3", "vLength", "sum", "v2Length", "v3Length", "v2SetLength", "newLength", "angle", "getV2Angle", "vNormalize", "length", "v2Normalize", "v3Normalize", "vDotProduct", "v2DotProduct", "v3DotProduct", "v3CrossProduct", "defaultValue", "vN", "N", "vEqual", "mSum", "matrix1", "matrix2", "decimalPlaces", "matrix", "i", "vSum", "m2Sum", "m3Sum", "mSub", "vSub", "m2Sub", "m3Sub", "mMulScalar", "m", "scalar", "v", "vMulScalar", "m2MulScalar", "m2", "m3MulScalar", "m3", "mTranspose", "vectorsCount", "vectorLength", "j", "m2Transpose", "m3Transpose", "mReset", "defaultValue", "res", "size", "vector", "m2Reset", "m3Reset", "m2x2", "m3x3", "mNxM", "N", "M", "vN", "identity2", "identity3", "identityN", "mMul", "transposed", "vector1", "vector2", "product", "vDotProduct", "mMulVector", "mEqual", "vEqual", "getRandom", "min", "max", "decimalPlaces", "setDecimalPlaces", "getRandomInt", "getRandomBoolean", "getRandomItemFromArray", "array", "randomIndex", "mod", "n", "m", "convertRange", "x", "a", "b", "c", "d", "doRangesOverlap", "isNumber", "value", "stringToNumber", "value", "defaultNumber", "_a", "res", "v2QuadraticBezierCurve", "startControlPoint", "centerControlPoint", "endControlPoint", "temp1", "temp2", "temp3", "v3QuadraticBezierCurve", "v2CubicBezierCurve", "center1ControlPoint", "center2ControlPoint", "temp4", "v3CubicBezierCurve", "v2", "v3", "vN", "m2x2", "m3x3", "mNxM", "identity2", "identity3", "identityN", "vEqual", "mEqual", "vSum", "v2Sum", "v3Sum", "vSub", "v2Sub", "v3Sub", "vMulScalar", "v2MulScalar", "v3MulScalar", "vLength", "v2Length", "v3Length", "v2SetLength", "vNormalize", "v2Normalize", "v3Normalize", "vDotProduct", "v2DotProduct", "v3DotProduct", "v3CrossProduct", "mSum", "m2Sum", "m3Sum", "mSub", "m2Sub", "m3Sub", "mMulScalar", "m2MulScalar", "m3MulScalar", "mTranspose", "m2Transpose", "m3Transpose", "mMul", "mMulVector", "mReset", "m2Reset", "m3Reset", "getV2Angle", "setV2Angle", "radiansToDegrees", "degreesToRadians", "setDecimalPlaces", "getRandom", "getRandomInt", "getRandomBoolean", "getRandomItemFromArray", "mod", "convertRange", "doRangesOverlap", "isNumber", "stringToNumber", "v2QuadraticBezierCurve", "v3QuadraticBezierCurve", "v2CubicBezierCurve", "v3CubicBezierCurve"]
}
